<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Angie's Blog</title><link href="https://xmenfolk.github.io/" rel="alternate"></link><link href="https://xmenfolk.github.io/feeds/all.atom.xml" rel="self"></link><id>https://xmenfolk.github.io/</id><updated>2017-04-19T00:00:00-03:00</updated><entry><title>KafKa入门</title><link href="https://xmenfolk.github.io/posts/kafkaIntroduction/" rel="alternate"></link><published>2017-04-19T00:00:00-03:00</published><updated>2017-04-19T00:00:00-03:00</updated><author><name>Angie</name></author><id>tag:xmenfolk.github.io,2017-04-19:/posts/kafkaIntroduction/</id><summary type="html">&lt;h3&gt;kafka背景&lt;/h3&gt;
&lt;p&gt;Kafka最初是由LinkedIn开发，并于2011年成为Apache的一个开源项目，随后在2012变为Apache的一个顶级项目。kafka是由Scala和Java语言编写的的。Kafka是一个基于发布-订阅，具有容错的消息系统。具有高性能，可扩展，分布式等特性。&lt;/p&gt;
&lt;h3&gt;kafka介绍&lt;/h3&gt;
&lt;p&gt;在大数据领域中，我们会使用了大量的数据。 关于大数据，我们有两个主要挑战。第一个挑战是如何收集大量的数据，第二个挑战是分析收集到的数据。为了克服这些挑战，你需要一个消息系统。Kafka的设计目标就是称为一个分布式，高吞吐量的消息系统。Kafka也可以作为一个传统的消息中间件的替代品。 与其他消息系统相比，Kafka具有更好的吞吐量，内置分区，复制和固有的容错能力，这使得它非常适合大规模消息处理应用程序。&lt;/p&gt;
&lt;h4&gt;什么是消息系统？&lt;/h4&gt;
&lt;p&gt;消息系统负责将数据从一个应用程序传输到另一个应用程序，因此应用程序可以专注于数据，但不用关心消息如何共享。 分布式消息传递基于可靠消息队列的概念。 消息在客户端应用程序和消息传递系统之间异步排队。 有两种类型的消息模式可用：一种是点对点，另一种是发布-订阅（pub-sub）消息系统。 大多数消息模式遵循pub-sub。&lt;/p&gt;
&lt;h4&gt;点对点消息系统&lt;/h4&gt;
&lt;p&gt;在点对点消息系统中，消息被保留在队列中。 一个或多个消费者可以消费队列中的消息，但是特定消息最多只能由一个消费者消费。 一旦消费者读取队列中的消息，它就从该队列中消失。 该系统的典型示例是订单处理系统，其中每个订单将由一个订单处理器处理，但多个订单处理器也可以同时工作。 下图描述了结构。  &lt;/p&gt;
&lt;p&gt;&lt;img alt="01" src="/postsimage/kafkaIntroduction/point-to-point-model.jpeg"&gt;  &lt;/p&gt;
&lt;h4&gt;发布-订阅消息系统&lt;/h4&gt;
&lt;p&gt;在发布-订阅系统中，消息被保留在一个主题中。与点对点系统不同，消费者可以订阅一个或多个主题并使用该主题中的所有消息。在发布-订阅系统中，消息生产者称为发布者，消息使用者称为订阅者。 一个现实生活的例子是Dish电视，它发布不同的渠道，如运动，电影，音乐等，任何人都可以订阅自己的频道集，并在这些订阅的频道可用时获得它们。&lt;br&gt;
&lt;img alt="02" src="/postsimage/kafkaIntroduction/pub-sub-model.jpeg"&gt;  &lt;/p&gt;
&lt;h4&gt;kafka是什么？&lt;/h4&gt;
&lt;p&gt;Apache Kafka是一个分布式发布 - 订阅消息系统和一个强大的队列，可以处理大量的数据，并使您能够将消息从一个端点传递到另一个端点。 Kafka适合离线和在线消息消费。 Kafka消息保留在磁盘上，并在群集内复制以防止数据丢失。 Kafka构建在ZooKeeper同步服务之上。 它与Apache Storm和Spark非常好地集成，用于实时流式数据分析。&lt;/p&gt;
&lt;h4&gt;优点&lt;/h4&gt;
&lt;p&gt;以下是Kafka的几个优点：&lt;/p&gt;
&lt;p&gt;可靠性 - Kafka 是一个分布式，消息分区的，拥有消息复制和容错的系统。
扩展性 - Kafka消息系统可以实现在线扩展
可用性 - Kafka 使用 “分布式的commit log”，这也意味着消息会尽可能快的持久化到磁盘。
高性能 - Kafka 针对消息发送和消费都有很高的吞吐量。 即使保存了TB级别的数据性能也不会下降。&lt;/p&gt;
&lt;p&gt;Kafka 非常快并保证零宕机和零消息丢失。&lt;/p&gt;
&lt;h4&gt;用例&lt;/h4&gt;
&lt;p&gt;kafka通常用于下面的使用场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;监控
Kafka通常用于监控数据的操作。 这涉及聚合来自分布式应用程序的统计信息，以产生集中化的操作数据。&lt;/li&gt;
&lt;li&gt;日志聚合方案
kafka可以用来收集跨组织的多个服务的日志，并将这些日志转为统一的格式供消费者使用。&lt;/li&gt;
&lt;li&gt;流式处理
流行的实时计算框架，如Storm和Spark流式读取topic中的数据进行处理，然后将处理的结果写入新的，用户或应用需要使用的topic中。Kafka强大的持久性功能在流式处理上下文中也是非常有用的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;need for Kafka&lt;/h4&gt;
&lt;p&gt;Kafka是一个统一的平台，用于处理所有实时数据Feed。 Kafka支持低延迟消息传递，并在出现机器故障时提供对容错的保证。它具有处理大量不同消费者的能力。 Kafka非常快，执行2百万w/s。 Kafka将所有数据保存到磁盘，这实质上意味着所有写入都会进入操作系统（RAM）的页面缓存。 这使得将数据从页面缓存传输到网络套接字非常有效。  &lt;/p&gt;
&lt;h3&gt;Kafka基础概念&lt;/h3&gt;
&lt;p&gt;在深入了解Kafka之前，你应该先了解一些基本的术语。像topics,brokers,producers,consumers。下图说明了主要的术语并且表格对这些术语进行了详细的解释。
&lt;img alt="03" src="/postsimage/kafkaIntroduction/kafka-foundamental.jpeg"&gt;&lt;br&gt;
在上图中一个topic被配置为拥有3个分区，分区1包含两个偏移因子0和1。分区2包含4个偏移因子0, 1, 2 和 3。分区3包含1个偏移因子0。 分区副本的id和该副本所在的broker的id一致。&lt;/p&gt;
&lt;p&gt;假设，如果一个topic配置的副本因子为3，则kafka会针对该topic的每个分区创建3个独立的副本并将这些副本尽量均匀分散到集群的每个节点上 …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;kafka背景&lt;/h3&gt;
&lt;p&gt;Kafka最初是由LinkedIn开发，并于2011年成为Apache的一个开源项目，随后在2012变为Apache的一个顶级项目。kafka是由Scala和Java语言编写的的。Kafka是一个基于发布-订阅，具有容错的消息系统。具有高性能，可扩展，分布式等特性。&lt;/p&gt;
&lt;h3&gt;kafka介绍&lt;/h3&gt;
&lt;p&gt;在大数据领域中，我们会使用了大量的数据。 关于大数据，我们有两个主要挑战。第一个挑战是如何收集大量的数据，第二个挑战是分析收集到的数据。为了克服这些挑战，你需要一个消息系统。Kafka的设计目标就是称为一个分布式，高吞吐量的消息系统。Kafka也可以作为一个传统的消息中间件的替代品。 与其他消息系统相比，Kafka具有更好的吞吐量，内置分区，复制和固有的容错能力，这使得它非常适合大规模消息处理应用程序。&lt;/p&gt;
&lt;h4&gt;什么是消息系统？&lt;/h4&gt;
&lt;p&gt;消息系统负责将数据从一个应用程序传输到另一个应用程序，因此应用程序可以专注于数据，但不用关心消息如何共享。 分布式消息传递基于可靠消息队列的概念。 消息在客户端应用程序和消息传递系统之间异步排队。 有两种类型的消息模式可用：一种是点对点，另一种是发布-订阅（pub-sub）消息系统。 大多数消息模式遵循pub-sub。&lt;/p&gt;
&lt;h4&gt;点对点消息系统&lt;/h4&gt;
&lt;p&gt;在点对点消息系统中，消息被保留在队列中。 一个或多个消费者可以消费队列中的消息，但是特定消息最多只能由一个消费者消费。 一旦消费者读取队列中的消息，它就从该队列中消失。 该系统的典型示例是订单处理系统，其中每个订单将由一个订单处理器处理，但多个订单处理器也可以同时工作。 下图描述了结构。  &lt;/p&gt;
&lt;p&gt;&lt;img alt="01" src="/postsimage/kafkaIntroduction/point-to-point-model.jpeg"&gt;  &lt;/p&gt;
&lt;h4&gt;发布-订阅消息系统&lt;/h4&gt;
&lt;p&gt;在发布-订阅系统中，消息被保留在一个主题中。与点对点系统不同，消费者可以订阅一个或多个主题并使用该主题中的所有消息。在发布-订阅系统中，消息生产者称为发布者，消息使用者称为订阅者。 一个现实生活的例子是Dish电视，它发布不同的渠道，如运动，电影，音乐等，任何人都可以订阅自己的频道集，并在这些订阅的频道可用时获得它们。&lt;br&gt;
&lt;img alt="02" src="/postsimage/kafkaIntroduction/pub-sub-model.jpeg"&gt;  &lt;/p&gt;
&lt;h4&gt;kafka是什么？&lt;/h4&gt;
&lt;p&gt;Apache Kafka是一个分布式发布 - 订阅消息系统和一个强大的队列，可以处理大量的数据，并使您能够将消息从一个端点传递到另一个端点。 Kafka适合离线和在线消息消费。 Kafka消息保留在磁盘上，并在群集内复制以防止数据丢失。 Kafka构建在ZooKeeper同步服务之上。 它与Apache Storm和Spark非常好地集成，用于实时流式数据分析。&lt;/p&gt;
&lt;h4&gt;优点&lt;/h4&gt;
&lt;p&gt;以下是Kafka的几个优点：&lt;/p&gt;
&lt;p&gt;可靠性 - Kafka 是一个分布式，消息分区的，拥有消息复制和容错的系统。
扩展性 - Kafka消息系统可以实现在线扩展
可用性 - Kafka 使用 “分布式的commit log”，这也意味着消息会尽可能快的持久化到磁盘。
高性能 - Kafka 针对消息发送和消费都有很高的吞吐量。 即使保存了TB级别的数据性能也不会下降。&lt;/p&gt;
&lt;p&gt;Kafka 非常快并保证零宕机和零消息丢失。&lt;/p&gt;
&lt;h4&gt;用例&lt;/h4&gt;
&lt;p&gt;kafka通常用于下面的使用场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;监控
Kafka通常用于监控数据的操作。 这涉及聚合来自分布式应用程序的统计信息，以产生集中化的操作数据。&lt;/li&gt;
&lt;li&gt;日志聚合方案
kafka可以用来收集跨组织的多个服务的日志，并将这些日志转为统一的格式供消费者使用。&lt;/li&gt;
&lt;li&gt;流式处理
流行的实时计算框架，如Storm和Spark流式读取topic中的数据进行处理，然后将处理的结果写入新的，用户或应用需要使用的topic中。Kafka强大的持久性功能在流式处理上下文中也是非常有用的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;need for Kafka&lt;/h4&gt;
&lt;p&gt;Kafka是一个统一的平台，用于处理所有实时数据Feed。 Kafka支持低延迟消息传递，并在出现机器故障时提供对容错的保证。它具有处理大量不同消费者的能力。 Kafka非常快，执行2百万w/s。 Kafka将所有数据保存到磁盘，这实质上意味着所有写入都会进入操作系统（RAM）的页面缓存。 这使得将数据从页面缓存传输到网络套接字非常有效。  &lt;/p&gt;
&lt;h3&gt;Kafka基础概念&lt;/h3&gt;
&lt;p&gt;在深入了解Kafka之前，你应该先了解一些基本的术语。像topics,brokers,producers,consumers。下图说明了主要的术语并且表格对这些术语进行了详细的解释。
&lt;img alt="03" src="/postsimage/kafkaIntroduction/kafka-foundamental.jpeg"&gt;&lt;br&gt;
在上图中一个topic被配置为拥有3个分区，分区1包含两个偏移因子0和1。分区2包含4个偏移因子0, 1, 2 和 3。分区3包含1个偏移因子0。 分区副本的id和该副本所在的broker的id一致。&lt;/p&gt;
&lt;p&gt;假设，如果一个topic配置的副本因子为3，则kafka会针对该topic的每个分区创建3个独立的副本并将这些副本尽量均匀分散到集群的每个节点上。为了在集群的节点间进行负载，每一个broker都会保存一个或多个这样的分区。多个producer和consumer可以同时发布或获取消息。  &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Components&lt;/th&gt;
&lt;th align="left"&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;topics&lt;/td&gt;
&lt;td align="left"&gt;隶属于特定分类的消息流称为topic。数据保存在topic中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;partitions&lt;/td&gt;
&lt;td align="left"&gt;topics会被切分为分区。针对每一个主题，kafka最少保持一个分区。每一个这样的分区以顺序不可变的方式保存消息。一个分区有一个或多个大小相同的segment文件组成。Topics拥有多个分区，因此可以保存大量的数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Partition offset&lt;/td&gt;
&lt;td align="left"&gt;每个分区中的消息拥有一个唯一的序列id,被称为offset&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Replicas of partition&lt;/td&gt;
&lt;td align="left"&gt;分区副本仅仅是分区的备份，不会对副本分区进行读写操作，只是用来防止数据丢失。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Brokers&lt;/td&gt;
&lt;td align="left"&gt;1. Brokers 是维护发布消息的系统。每个broker针对每个topic可能包含0个或多个该topic的分区。假设，一个topic拥有N个分区，并且集群拥有N个broker,则每个broker会负责一个分区。2. 假设，一个topic拥有N个分区，并且集群拥有N+M个broker,则前N个broker每个处理一个分区，剩余的M个broker则不会处理任何分区 3.假设，一个topic拥有N个分区，并且集群拥有M个broker（M &amp;lt; N），则这些分区会在所有的broker中进行均匀分配。每个broker可能会处理一个或多个分区。这种场景不推荐使用，因为会导致热点问题和负载不均衡问题。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Kafka Cluster&lt;/td&gt;
&lt;td align="left"&gt;由多个broker组成的kafka被称为kafka集群。一个kafaka集群在不停机扩展。集群负载所有消息的持久化和副本处理。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Producers&lt;/td&gt;
&lt;td align="left"&gt;Producers 是向一个或多个Kafka中topic发布消息的发布者。Producers 将消息发送到 Kafka 的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Consumers&lt;/td&gt;
&lt;td align="left"&gt;Consumers 从broker读取数据。Consumers 订阅一个或多个 topic，并通过pull方式从broker拉取订阅的数据。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Leader&lt;/td&gt;
&lt;td align="left"&gt;Leader是负责某个分区数据读写操作的节点。每个分区都有一个leader&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Follower&lt;/td&gt;
&lt;td align="left"&gt;跟随leader操作的节点被称为follower。如果leader节点不可用，则会从所有的fellower中挑选一个作为新的leader节点。一个follower节点作为leader节点一个普通的消费者，拉取leader数据并更新自己的数据存储。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;Kafka集群架构&lt;/h3&gt;
&lt;p&gt;看看下面的插图。 它显示了Kafka的集群工作原理。  &lt;/p&gt;
&lt;p&gt;&lt;img alt="04" src="/postsimage/kafkaIntroduction/kafka-cluster.jpeg"&gt; &lt;br&gt;
下面的表格描述了在上图中提到的每个组件的详细信息。  &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Components&lt;/th&gt;
&lt;th align="left"&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Broker&lt;/td&gt;
&lt;td align="left"&gt;Kafka集群通常使用多个Broker来实现集群的负载均衡。 Kafka brokers 是无状态的，因为它们使用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;ZooKeeper&lt;/td&gt;
&lt;td align="left"&gt;ZooKeeper是用来管理和协调Kafka broker 的。ZooKeeper 服务主要用来通知 producer 和 consumer 关于任何新加入Kafka集群或某个Kafka Broker宕机退出集群的消息。 根据收到Zookeeper的关于Broker的存在或失败的消息通知，然后生产者和消费者采取决定，并开始与其它Broker协调它们的任务。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Producers&lt;/td&gt;
&lt;td align="left"&gt;producer将数据推送给Broker。 当新Broker启动时，所有生产者搜索它并自动发送消息到该新Broker。 Kafka Producer不等待来自Broker的确认，并以Broker可以处理的速度发送消息。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Consumers&lt;/td&gt;
&lt;td align="left"&gt;由于 Kafka brokers 是无状态的， 因此需要Consumer来维护根据partition offset已经消费的消息数量信息。 如果 consumer 确认了一个指定消息的offset，那也就意味着 consumer 已经消费了该offset之前的所有消息。Consumer可以向Broker异步发起一个拉取消息的请求来缓存待消费的消息。consumers 也可以通过提供一个指定的offset值来回溯或跳过Partition中的消息。Consumer 消费消息的offset值是保存在ZooKeeper中的。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;Kafka工作流程&lt;/h3&gt;
&lt;p&gt;到目前为止，我们讨论了Kafka的核心该概念。现在让我们将目光转向Kafka的工作流程上。Kafka是由分裂为一个或多个partition的topic的集合。 Kafka中的partition可以认为是消息的线性排序序列，其中每个消息由它们的索引（称为offset）来标识。 Kafka集群中的所有数据是每个partition数据分区的并集。 新写入的消息写在分区的末尾，消息由消费者顺序读取。通过将消息复制到不同的Broker来提供持久性。Kafka以快速，可靠，持久，容错和零停机的方式提供基于pub-sub和队列模型的消息系统。 在这两种情况下，生产者只需将消息发送到topic，消费者可以根据自己的需要选择任何一种类型的消息传递系统。 让我们按照下一节中的步骤来了解消费者如何选择他们选择的消息系统。&lt;/p&gt;
&lt;h4&gt;Pub-Sub 消息模型工作流程&lt;/h4&gt;
&lt;p&gt;下面是 Pub-Sub 消息模型的工作流程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;生产者定期向topic发送消息。&lt;/li&gt;
&lt;li&gt;Kafka broker 根据配置将topic的消息存储到指定的partition上。Kafka确保所有的消息均匀分布在topic的所有partition上。如果producer发送了两条消息，并且该topic有两个partition，则每个partition会有一条消息。&lt;/li&gt;
&lt;li&gt;Consumer 订阅指定的topic。&lt;/li&gt;
&lt;li&gt;一旦消费者订阅了topic，Kafka将向消费者提供topic的当前offset，并且还将offset保存在Zookeeper中。&lt;/li&gt;
&lt;li&gt;消费者将定期请求Kafka（如100 Ms）新消息。&lt;/li&gt;
&lt;li&gt;一旦Kafka从生产者接收到消息，它将这些消息转发给消费者。&lt;/li&gt;
&lt;li&gt;消费者将收到消息并进行处理。&lt;/li&gt;
&lt;li&gt;一旦消息被处理，消费者将向Kafka broker发送确认。&lt;/li&gt;
&lt;li&gt;一旦Kafka收到确认，它将offset更改为新值，并在Zookeeper中更新它。 由于offset在Zookeeper中被维护，消费者可以正确地读取下一条消息，即使服务器宕机后重启。&lt;/li&gt;
&lt;li&gt;以上流程将重复，直到消费者停止请求。&lt;/li&gt;
&lt;li&gt;消费者可以随时回退/跳转到某个topic的期望offset处，并读取所有后续消息。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;队列消息模型工作流程 &amp;amp; Consumer Group&lt;/h4&gt;
&lt;p&gt;在基于队列的消息系统中，取代单个消费者的是订阅了相同topic的一群拥有相同Group ID的消费者集群。简单来说，订阅具有相同“组ID”的主题的消费者被认为是单个组，并且消息在它们之间共享。 让我们检查这个系统的实际工作流程。&lt;/p&gt;
&lt;p&gt;生产者定期向topic发送消息。
Kafka broker 根据配置将topic的消息存储到指定的partition上。
单个consumer以名为Group-1的Group ID 订阅名为Topic-01的topic。
Kafka 会以和Pub-Sub消息模型相同的方式和consumer进行交互知道新的消费者以同样的Group ID加入到消费者分组中。
一旦新的消费者加入后，Kafka将操作切换到共享模式，将所有topic的消息在两个消费者间进行均衡消费。这种共享行为直到加入的消费者结点数目达到该topic的分区数。
一旦消费者的数目大于topic的分区数，则新的消费者不会收到任何消息直到已经存在的消费者取消订阅。出现这种情况是因为Kafka中的每个消费者将被分配至少一个分区，并且一旦所有分区被分配给现有消费者，新消费者将必须等待。
该功能被称为 “Consumer Group”。以同样的方式，Kafka将以非常简单和高效的方式提供这两种系统功能。&lt;/p&gt;
&lt;h4&gt;ZooKeeper的角色&lt;/h4&gt;
&lt;p&gt;Apache Kafka的一个关键依赖是Apache Zookeeper，它是一个分布式配置和同步服务。 Zookeeper是Kafka代理和消费者之间的协调接口。 Kafka服务器通过Zookeeper集群共享信息。 Kafka在Zookeeper中存储基本元数据，例如关于主题，代理，消费者偏移（队列读取器）等的信息。由于所有关键信息存储在Zookeeper中，并且它通常在其整个集群上复制此数据，因此Zookeeper的故障不会影响Kafka集群的状态。一旦Zookeeper重新启动， Kafka将恢复状态。 这为Kafka带来了零停机时间。 Kafka代理之间的领导者选举也通过使用Zookeeper在领导失败的情况下完成。
要了解更多关于Zookeeper，请参考http://www.tutorialspoint.com/zookeeper/  &lt;/p&gt;
&lt;h3&gt;Kafka安装步骤&lt;/h3&gt;
&lt;p&gt;下面是在你机器上安装Java的步骤：&lt;/p&gt;
&lt;h4&gt;步骤 1: 校验Java是否安装&lt;/h4&gt;
&lt;p&gt;但愿你的机器上已经安装了Java环境，因此你可以通过下面的命令检查Java是否已经安装。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ java -version
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果你的机器上已经安装了Java，则你会看到Java的版本信息。&lt;/p&gt;
&lt;p&gt;步骤 1.1: 下载 JDK
如果你还没有下载JDK，则可以通过下面的链接下载最新版本的JDK。http://www.oracle.com/technetwork/java/javase/downloads/index.html
目前最新的JDK版本是JDK 8u 60 文件名为： “jdk-8u60-linux-x64.tar.gz”。&lt;/p&gt;
&lt;p&gt;步骤 1.2: 解压文件
通常，正在下载的文件存储在下载文件夹中，使用下面的命令进行文件校验和解压。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; /go/to/download/path
$ tar -zxf jdk-8u60-linux-x64.gz
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;步骤 1.3: 进入Opt文件夹
为了让Java对所有人都是可用的，需要将解压后的内容移动到/usr/local/java文件夹下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ su
password: &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt; password of root user&lt;span class="o"&gt;)&lt;/span&gt; $ mkdir /opt/jdk
$ mv jdk-1.8.0_60 /opt/jdk/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;步骤 1.4: 设置path环境变量
可以同步下面的命令设置path和JAVA_HOME环境变量&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;JAVA_HOME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;/usr/jdk/jdk-1.8.0_60
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;:&lt;span class="nv"&gt;$JAVA_HOME&lt;/span&gt;/bin
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;是上面的配置生效：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;source&lt;/span&gt; ~/.bashr
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Step 1.5: Java Alternatives
Use the following command to change Java Alternatives.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;update-alternatives --install /usr/bin/java java /opt/jdk/jdk1.8.0_60/bin/java &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Step 1.6: Now verify java using verification command (java -version) explained in Step 1.&lt;/p&gt;
&lt;h4&gt;步骤 2: ZooKeeper 框架安装&lt;/h4&gt;
&lt;p&gt;步骤 2.1: 下载 ZooKeeper
通过下面的链接下载zookeeper并安装
http://zookeeper.apache.org/releases.html&lt;/p&gt;
&lt;p&gt;到目前为止最新的 ZooKeeper 版本是 3.4.6 (ZooKeeper-3.4.6.tar.gz).&lt;/p&gt;
&lt;p&gt;步骤 2.2: 解压 tar 文件
通过下面的命令解压文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; opt/
$ tar  -zxf  zookeeper-3.4.6.tar.gz
$ &lt;span class="nb"&gt;cd&lt;/span&gt; zookeeper-3.4.6
$ mkdir data
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;步骤 2.3: 创建配置文件
用vi打开名为conf/zoo.cfg的配置文件并在配置文件中添加如下的内容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vi conf/zoo.cfg
&lt;span class="nv"&gt;tickTime&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2000&lt;/span&gt;
&lt;span class="nv"&gt;dataDir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/path/to/zookeeper/data
&lt;span class="nv"&gt;clientPort&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2181&lt;/span&gt;
&lt;span class="nv"&gt;initLimit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;
&lt;span class="nv"&gt;syncLimit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;完成配置文件的创建后你就可以启动Zookeeper服务器了。&lt;/p&gt;
&lt;p&gt;步骤 2.4: 启动 ZooKeeper Server&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bin/zkServer.sh start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在该命令执行后你可以看到下面的反馈信息：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ JMX enabled by default
$ Using config: /Users/../zookeeper-3.4.6/bin/../conf/zoo.cfg $ Starting zookeeper ... STARTED
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;步骤 2.5: 启动命令行工具&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bin/zkCli.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在输入上面的命令后，你会连接到Zookeeper服务器并得到下面的响应信息：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Connecting to localhost:2181
................
................
................
Welcome to ZooKeeper!
................
................
WATCHER::
WatchedEvent state:SyncConnected type: None path:null &lt;span class="o"&gt;[&lt;/span&gt;zk: localhost:2181&lt;span class="o"&gt;(&lt;/span&gt;CONNECTED&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;步骤 2.6: 停止 Zookeeper Server
在连接到Zookeeper并执行了一些操作后你可以通过下面的命令来停止Zookeeper。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bin/zkServer.sh stop
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在你已经在你的机器上成功安装了Java和Zookeeper，接下来我们将安装Kafka。&lt;/p&gt;
&lt;h4&gt;步骤 3: 安装Apache Kafka&lt;/h4&gt;
&lt;p&gt;步骤 3.1: 下载 Kafka
点击下面的链接来下载kafka:
https://www.apache.org/dyn/closer.cgi?path=/kafka/0.9.0.0/kafka_2.11-0.9.0.0.tgz&lt;/p&gt;
&lt;p&gt;步骤 3.2: 解压tar文件
使用下面的命令解压下载的文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; opt/
$ tar  -zxf kafka_2.11.0.9.0.0 tar.gz
$ &lt;span class="nb"&gt;cd&lt;/span&gt; kafka_2.11.0.9.0.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Step 3.3: 启动 Server
你可以通过下面的命令启动Server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bin/kaka-server-start.sh config/server.properties
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在服务启动后，你回在屏幕上看到如下的信息：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bin/kaka-server-start.sh config/server.properties
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2016&lt;/span&gt;-01-02 &lt;span class="m"&gt;15&lt;/span&gt;:37:30,410&lt;span class="o"&gt;]&lt;/span&gt; INFO KafkaConfig values:
request.timeout.ms &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;30000&lt;/span&gt;
log.roll.hours &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;168&lt;/span&gt; inter.broker.protocol.version &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.9.0.X    log.preallocate &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt; security.inter.broker.protocol &lt;span class="o"&gt;=&lt;/span&gt; PLAINTEXT
   ....................................................
   ....................................................
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;步骤 4: 停止 the Server
在执行完所有的操作后你可以通过下面的命令停止服务：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bin/kaka-server-stop.sh config/server.properties
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;目前我们已经完成了Kafka的安装，接下来我们来看看kafka的基本操作。&lt;/p&gt;
&lt;h3&gt;Kafka基本操作&lt;/h3&gt;
&lt;p&gt;首先让我们实现单个结点的Broker，随后看看如何搭建多结点的Kafka集群。&lt;/p&gt;
&lt;p&gt;希望你已经安装了Java，Zookeeper, Kafka。在搭建Kafka集群前你应该先启动ZooKeeper ，因为Kafka集群依赖ZooKeeper。&lt;/p&gt;
&lt;h4&gt;Start ZooKeeper&lt;/h4&gt;
&lt;p&gt;打开一个新的终端并输入下面的命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bin/zookeeper-server-start.sh config/zookeeper.properties
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输入下面的命令启动Kafka Server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bin/kafka-server-start.sh config/server.properties
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在启动Kafka Broker后，在启动Zookeeper的终端窗口输入jps命令你会看到如下的输出：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="m"&gt;821&lt;/span&gt; QuorumPeerMain
&lt;span class="m"&gt;928&lt;/span&gt; Kafka
&lt;span class="m"&gt;931&lt;/span&gt; Jps    
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在你应该可以在终端看到两个守护进程，QuorumPeerMain 是 ZooKeeper 另一个是Kafka。&lt;/p&gt;
&lt;h4&gt;单个Broker结点配置&lt;/h4&gt;
&lt;p&gt;在这个配置中，你有一个ZooKeeper和一个Broker实例。 以下是配置步骤：
创建Kafka主题：Kafka提供了一个名为“kafka-topics.sh”的命令行实用程序来在服务器上创建主题。 打开新终端并键入以下示例。&lt;/p&gt;
&lt;p&gt;语法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor &lt;span class="m"&gt;1&lt;/span&gt; -- partitions &lt;span class="m"&gt;1&lt;/span&gt; --topic topic-name
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;例子&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor &lt;span class="m"&gt;1&lt;/span&gt; -- partitions &lt;span class="m"&gt;1&lt;/span&gt; --topic Hello-Kafka
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们刚才创建了一个名为Hello-Kafka,一个分区和一个副本的topic。上面命令的输出信息如下：&lt;/p&gt;
&lt;p&gt;输出: Created topic “Hello-Kafka”&lt;/p&gt;
&lt;h4&gt;List of Topics&lt;/h4&gt;
&lt;p&gt;为了获取Kafka服务器上的topic列表，你可以使用下面的命令：&lt;/p&gt;
&lt;p&gt;语法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor &lt;span class="m"&gt;1&lt;/span&gt; -- partitions &lt;span class="m"&gt;1&lt;/span&gt; --topic topic-name
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;例子&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor &lt;span class="m"&gt;1&lt;/span&gt; -- partitions &lt;span class="m"&gt;1&lt;/span&gt; --topic Hello-Kafka
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Hello-Kafka
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;由于我们只创建了一个名为Hello-Kafka的topic，则只会有上面的输出。如果你创建了很多topic则你回获取更过topic名称列表。&lt;/p&gt;
&lt;h4&gt;启动Producer发送消息&lt;/h4&gt;
&lt;p&gt;语法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bin/kafka-console-producer.sh --broker-list localhost:9092 --topic topic-name
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从上面的语法我们可以看到有两个重要参数是必须的：Broker-list - 指定我们要发送消息到的Broker列表。在这个例子中我们只有一个Broker。配置文件 server.properties中指定了Broker的端口号，由于我们已经指定了Broker的端口号所以我们可以直接指定；
topic-name：我们发送消息所属的topic。&lt;/p&gt;
&lt;p&gt;例子&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bin/kafka-console-producer.sh --broker-list localhost:9092 --topic Hello-Kafka
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;生产者将等待来自标准输入的输入并发布到Kafka集群。 默认情况下，每个新行都作为一条新消息发布，生产者使用配置文件config/producer.properties中指定缺省属性。 现在你可以在终端中键入几行消息，如下所示。&lt;/p&gt;
&lt;p&gt;输出&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bin/kafka-console-producer.sh --broker-list localhost:9092 --topic Hello-Kafka
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2016&lt;/span&gt;-01-16 &lt;span class="m"&gt;13&lt;/span&gt;:50:45,931&lt;span class="o"&gt;]&lt;/span&gt; WARN property topic is not valid &lt;span class="o"&gt;(&lt;/span&gt;kafka.utils.Verifia- bleProperties&lt;span class="o"&gt;)&lt;/span&gt;
Hello
My first message
My second message
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;启动消费者接收消息&lt;/h4&gt;
&lt;p&gt;和生产者类似，消费者默认的属性配置在配置文件config/consumer.properties文件中。开发一个新的终端，输入如下的命令来消费消息：&lt;/p&gt;
&lt;p&gt;语法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bin/kafka-console-consumer.sh --zookeeper localhost:2181 —topic topic-name --from- beginning
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;例子&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bin/kafka-console-consumer.sh --zookeeper localhost:2181 —topic Hello-Kafka --from- beginning    
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Hello
My first message
My second message
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最后，你可以从生产者的终端输入消息，并看到它们出现在消费者的终端。 到目前为止，你对具有单个broker的单节点群集有非常好的了解。 现在让我们继续讨论多个代理配置。&lt;/p&gt;
&lt;h4&gt;多节点配置&lt;/h4&gt;
&lt;p&gt;在搭建多结点Kafka节点集群时首先启动你的Zookeeper服务。&lt;/p&gt;
&lt;p&gt;创建多节点Kafka Broker – 我们已经拥有了一个Kafka Broker实例，它使用的配置文件是config/server.properties中。 现在我们需要多个代理实例，因此将现有的server.proties文件复制到两个新的配置文件中，并将其重命名为server-one.properties和server-two.properties。 然后编辑这两个新文件并分配以下更改：&lt;/p&gt;
&lt;p&gt;config/server-one.properties&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# The id of the broker. This must be set to a unique integer for    each broker. &lt;/span&gt;
broker.id&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="c1"&gt;# The port the socket server listens on&lt;/span&gt;
&lt;span class="nv"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;9093&lt;/span&gt;
&lt;span class="c1"&gt;# A comma seperated list of directories under which to store log files &lt;/span&gt;
log.dirs&lt;span class="o"&gt;=&lt;/span&gt;/tmp/kafka-logs-1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;config/server-two.properties&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# The id of the broker. This must be set to a unique integer for    each broker. &lt;/span&gt;
broker.id&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="c1"&gt;# The port the socket server listens on&lt;/span&gt;
&lt;span class="nv"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;9094&lt;/span&gt;
&lt;span class="c1"&gt;# A comma seperated list of directories under which to store log files &lt;/span&gt;
log.dirs&lt;span class="o"&gt;=&lt;/span&gt;/tmp/kafka-logs-2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;启动多个Broker – 在完成上面的修改后，打开三个终端来启动三个Broker节点。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Broker1
bin/kafka-server-start.sh config/server.properties
Broker2
bin/kafka-server-start.sh config/server-one.properties
Broker3
bin/kafka-server-start.sh config/server-two.properties
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在我们用了三个不同Broker结点在同一个机器上，你可以通过jps命令来校验，你会看到对应的输出。&lt;/p&gt;
&lt;h4&gt;创建topic&lt;/h4&gt;
&lt;p&gt;让我们将副本因子设为3，因为我们拥有三个Broker实例，如果你拥有两个Broker则你设置为2。&lt;/p&gt;
&lt;p&gt;语法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor &lt;span class="m"&gt;3&lt;/span&gt; -par- titions &lt;span class="m"&gt;1&lt;/span&gt; --topic topic-name
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;例子&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor &lt;span class="m"&gt;3&lt;/span&gt; -partitions &lt;span class="m"&gt;1&lt;/span&gt; --topic Multibrokerapplication
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;created topic “Multibrokerapplication”
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Describe 命令用来检查指定topic的详细信息，如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bin/kafka-topics.sh --describe --zookeeper localhost:2181 --topic Multibrokerapplication
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bin/kafka-topics.sh --describe --zookeeper localhost:2181 --topic Multibrokerapplication

Topic:Multibrokerapplication PartitionCount:1 ReplicationFactor:3 Configs: Topic:Multibrokerapplication Partition:0 Leader:0 Replicas:0,2,1 Isr:0,2,1 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从上面的输出，我们可以得出结论，第一行给出所有分区的摘要，显示topic名称，分区数量和我们已经选择的复制因子。 在第二行中，每个节点将是分区的随机选择的领导者。
在我们的例子中，我们看到我们的第一个broker（with broker.id 0）是领导者。 然后Replicas：0,2,1意味着所有的Broker已经完成topic的复制。Isr是in-sync副本的集合。这是副本的子集，当前活着的并和leader保持同步的结点。&lt;/p&gt;
&lt;h4&gt;启动生产者发送消息&lt;/h4&gt;
&lt;p&gt;这个生产者和前面提到的单个Broder结点中的生产者是一样的。&lt;/p&gt;
&lt;p&gt;例子&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bin/kafka-console-producer.sh --broker-list localhost:9092 --topic Multibrokerappli- cation    
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bin/kafka-console-producer.sh --broker-list localhost:9092 --topic Multibrokerappli- cation
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2016&lt;/span&gt;-01-20 &lt;span class="m"&gt;19&lt;/span&gt;:27:21,045&lt;span class="o"&gt;]&lt;/span&gt; WARN Property topic is not valid &lt;span class="o"&gt;(&lt;/span&gt;kafka.utils.Verifia-bleProperties&lt;span class="o"&gt;)&lt;/span&gt;
This is single node-multi broker demo
This is the second message
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;启动消费者接收消息&lt;/h4&gt;
&lt;p&gt;这个消费者和前面提到的单个Broder结点中的消费者是一样的。&lt;/p&gt;
&lt;p&gt;例子&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bin/kafka-console-consumer.sh --zookeeper localhost:2181 —topic Multibrokerapplication --from-beginning
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bin/kafka-console-consumer.sh --zookeeper localhost:2181 —topic Multibrokerapplication —from-beginning
This is single node-multi broker demo
This is the second message
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;基本操作&lt;/h4&gt;
&lt;p&gt;该本章节我们来讨论Kafka的各种基本操作。&lt;/p&gt;
&lt;h4&gt;修改Topic&lt;/h4&gt;
&lt;p&gt;由于你已经在Kafka集群创建了topic，现在让我们修改已经创建的topic的信息。&lt;/p&gt;
&lt;p&gt;语法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bin/kafka-topics.sh --zookeeper localhost:2181 --alter --topic topic_name --partitions count
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;例子&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;We have already created a topic “Hello-Kafka” with single partition count and one replica factor. Now using “alter” &lt;span class="nb"&gt;command&lt;/span&gt; we have changed the partition count.

bin/kafka-topics.sh --zookeeper localhost:2181 --alter --topic Hello-kafka --parti- tions &lt;span class="m"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;WARNING: If partitions are increased &lt;span class="k"&gt;for&lt;/span&gt; a topic that has a key, the partition logic or ordering of the messages will be affected
Adding partitions succeeded!
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;删除topic&lt;/h4&gt;
&lt;p&gt;可以通过下面的语法删除topic&lt;/p&gt;
&lt;p&gt;语法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bin/kafka-topics.sh --zookeeper localhost:2181 --delete --topic topic_name
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;例子&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bin/kafka-topics.sh –zookeeper localhost:2181 –delete –topic Hello-kafka
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; Topic Hello-kafka marked &lt;span class="k"&gt;for&lt;/span&gt; deletion
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意： 该操作只有在Broker的配置文件中设置了选项delete.topic.enable=true才可以。&lt;/p&gt;</content><category term="[TechnologyArchitecture]"></category></entry><entry><title>性能测试之监控指标</title><link href="https://xmenfolk.github.io/posts/thePerformanceTest/" rel="alternate"></link><published>2017-04-17T00:00:00-03:00</published><updated>2017-04-17T00:00:00-03:00</updated><author><name>Angie</name></author><id>tag:xmenfolk.github.io,2017-04-17:/posts/thePerformanceTest/</id><summary type="html">&lt;h4&gt;测试场景&lt;/h4&gt;
&lt;p&gt;测试场景类型有性能测试、负载测试、压力测试、稳定性测试。  &lt;/p&gt;
&lt;p&gt;性能测试，是指以性能预期目标为前提，对系统不断施加压力，验证系统在资源可接受范围内，是否能达到性能预期。运用场景：此类型的测试目前最常见。每个项目的性能点，都需要做性能测试。  &lt;/p&gt;
&lt;p&gt;负载测试，狭义的负载测试，是指对系统不断地增加压力或增加一定压力下的持续时间，直到系统的某项或多项性能指标达到安全临界值，例如某种资源已经达到饱和状态等。运用场景：此类型的测试目前运用得比较少。一般情况下，是以服务器资源安全临界值为界限的测试。如果要模拟某个应用在指定服务器上最大且安全的负载量，则属于负载测试。  &lt;/p&gt;
&lt;p&gt;压力测试，是指超过安全负载的情况下，对系统不断施加压力，是通过确定一个系统的瓶颈或不能接收用户请求的性能点，来获得系统能提供的最大服务级别的测试。运用场景：此类型的测试目前运用得比较少。但对于大型的共享中心或者核心的应用也会用到。  &lt;/p&gt;
&lt;p&gt;稳定性测试，是指被测试系统在特定硬件、软件、网络环境条件下，给系统加载一定业务压力，使系统运行一段较长时间，以此检测系统是否稳定，一般稳定性测试时间为n*12小时。运用场景：此类型的测试目前也最常见，针对需要长时间稳定运行的性能点，需要执行稳定性测试。往往在一个项目的性能测试过程中，会划分出优先级较高的性能点，做稳定性测试。    &lt;/p&gt;
&lt;h4&gt;性能指标&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;PV: PageView, 页面浏览量或点击量，用户每次刷新即被计算一次；用户的一次刷新，给服务器造成了一次请求。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UV: UniqueVisitor, 访问你网站的一台计算机客户端为一个访客，0:00 - 24:00 内相同的客户端仅记一次。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TPS: Transaction Per Second 每秒系统处理的交易或事物的数量，衡量系统处理能力的重要指标。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RT: 响应时间，从客户端发送一个请求开始，到客户端接收到从服务器返回的响应结果结束所经历的时间，包括请求发送时间，网络传输时间和服务器处理时间三部分。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;VU: Virtual User， 模拟真实业务逻辑步骤的虚拟用户，虚拟用户模拟的操作步骤被记录在虚拟用户脚本中，通常使用并发实现。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TPS波动: 系统性能依赖于特定的硬件、软件代码、应用服务、网络资源等，所以在性能场景执行期间，TPS可能会表现为稳定，或者波动，抑或遵循一定的上升或下降趋势。用TPS波动系数来记录这个指标值。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CPU: CPU资源是指性能测试场景运行的这个时间段内，应用服务系统的CPU资源占用率。CPU资源是判断系统处理能力以及应用运行是否稳定的重要参数。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Load: 系统正在干活的多少的度量，队列长度。系统平均负载，被定义为在特定时间间隔（1m，5m，15m）内运行队列中的平均进程数。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I/O: I/O可分为磁盘IO和网卡IO。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JVM: 即java虚拟机，它拥有自己的处理器、堆栈、寄存器等，还有自己相应的指令系统。Java应用运行在JVM上面。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GC: GC是一种自动内存管理程序，它主要的职责是分配内存、保证被引用的对象始终在内存中、把不被应用的对象从内存中释放。FGC会引起JVM挂起。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;网速: 网络中的数据传输速率，一般以Byte/s为单位。通过ping延时来反映网速。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;流量: 性能测试中，一般指单位时间内流经网卡的总流量。分为inbound和outbound，一般以KB为单位。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;VU（并发压测用户数） = TPS（每秒执行事务数） × RT（响应时间）  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在寻找合适的并发用户数上，建议使用PTS(淘宝性能自动化：https://pts.aliyun.com/lite/index.htm?spm=0 …&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h4&gt;测试场景&lt;/h4&gt;
&lt;p&gt;测试场景类型有性能测试、负载测试、压力测试、稳定性测试。  &lt;/p&gt;
&lt;p&gt;性能测试，是指以性能预期目标为前提，对系统不断施加压力，验证系统在资源可接受范围内，是否能达到性能预期。运用场景：此类型的测试目前最常见。每个项目的性能点，都需要做性能测试。  &lt;/p&gt;
&lt;p&gt;负载测试，狭义的负载测试，是指对系统不断地增加压力或增加一定压力下的持续时间，直到系统的某项或多项性能指标达到安全临界值，例如某种资源已经达到饱和状态等。运用场景：此类型的测试目前运用得比较少。一般情况下，是以服务器资源安全临界值为界限的测试。如果要模拟某个应用在指定服务器上最大且安全的负载量，则属于负载测试。  &lt;/p&gt;
&lt;p&gt;压力测试，是指超过安全负载的情况下，对系统不断施加压力，是通过确定一个系统的瓶颈或不能接收用户请求的性能点，来获得系统能提供的最大服务级别的测试。运用场景：此类型的测试目前运用得比较少。但对于大型的共享中心或者核心的应用也会用到。  &lt;/p&gt;
&lt;p&gt;稳定性测试，是指被测试系统在特定硬件、软件、网络环境条件下，给系统加载一定业务压力，使系统运行一段较长时间，以此检测系统是否稳定，一般稳定性测试时间为n*12小时。运用场景：此类型的测试目前也最常见，针对需要长时间稳定运行的性能点，需要执行稳定性测试。往往在一个项目的性能测试过程中，会划分出优先级较高的性能点，做稳定性测试。    &lt;/p&gt;
&lt;h4&gt;性能指标&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;PV: PageView, 页面浏览量或点击量，用户每次刷新即被计算一次；用户的一次刷新，给服务器造成了一次请求。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UV: UniqueVisitor, 访问你网站的一台计算机客户端为一个访客，0:00 - 24:00 内相同的客户端仅记一次。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TPS: Transaction Per Second 每秒系统处理的交易或事物的数量，衡量系统处理能力的重要指标。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RT: 响应时间，从客户端发送一个请求开始，到客户端接收到从服务器返回的响应结果结束所经历的时间，包括请求发送时间，网络传输时间和服务器处理时间三部分。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;VU: Virtual User， 模拟真实业务逻辑步骤的虚拟用户，虚拟用户模拟的操作步骤被记录在虚拟用户脚本中，通常使用并发实现。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TPS波动: 系统性能依赖于特定的硬件、软件代码、应用服务、网络资源等，所以在性能场景执行期间，TPS可能会表现为稳定，或者波动，抑或遵循一定的上升或下降趋势。用TPS波动系数来记录这个指标值。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CPU: CPU资源是指性能测试场景运行的这个时间段内，应用服务系统的CPU资源占用率。CPU资源是判断系统处理能力以及应用运行是否稳定的重要参数。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Load: 系统正在干活的多少的度量，队列长度。系统平均负载，被定义为在特定时间间隔（1m，5m，15m）内运行队列中的平均进程数。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I/O: I/O可分为磁盘IO和网卡IO。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JVM: 即java虚拟机，它拥有自己的处理器、堆栈、寄存器等，还有自己相应的指令系统。Java应用运行在JVM上面。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GC: GC是一种自动内存管理程序，它主要的职责是分配内存、保证被引用的对象始终在内存中、把不被应用的对象从内存中释放。FGC会引起JVM挂起。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;网速: 网络中的数据传输速率，一般以Byte/s为单位。通过ping延时来反映网速。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;流量: 性能测试中，一般指单位时间内流经网卡的总流量。分为inbound和outbound，一般以KB为单位。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;VU（并发压测用户数） = TPS（每秒执行事务数） × RT（响应时间）  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在寻找合适的并发用户数上，建议使用PTS(淘宝性能自动化：https://pts.aliyun.com/lite/index.htm?spm=0.0.0.0.8t95Nt)的“梯度模式”，逐渐增加并发用户数，这个时候压力也会越来越大，当TPS的增长率小于响应时间的增长率时，这就是性能的拐点，也就是最合理的并发用户数；当TPS不再增长或者下降时，这个时候的压力就是最大的压力，所使用的并发用户数就是最大的并发用户数。如果此时的TPS不满足你的要求，那么就需要寻找瓶颈来优化。 &lt;br&gt;
&lt;img alt="01" src="/postsimage/performanceTest/test.jpg"&gt;&lt;br&gt;
  a点：性能期望值&lt;br&gt;
  b点：高于期望，系统安全&lt;br&gt;
  c点：高于期望，拐点&lt;br&gt;
  d点：超过负载，系统崩溃  &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="[PerformanceTest]"></category></entry><entry><title>自动化测试之BDD</title><link href="https://xmenfolk.github.io/posts/theAutomationTestOfBdd/" rel="alternate"></link><published>2017-02-26T00:00:00-03:00</published><updated>2017-02-26T00:00:00-03:00</updated><author><name>Angie</name></author><id>tag:xmenfolk.github.io,2017-02-26:/posts/theAutomationTestOfBdd/</id><summary type="html">&lt;p&gt;很久没更博了，不记录点什么会觉得脑子空空的。&lt;br&gt;
前些天在重构接口测试框架的时候，突发奇想的一个念头：就是要采用BDD方式来用作接口测试的数据驱动。于是花了一天时间简单学习了一下python的BDD框架-behave，并做了一个小实践。过程与结果，还算很满意。写此文章，向这些开源工具的贡献者们致敬！  &lt;/p&gt;
&lt;h3&gt;什么是BDD&lt;/h3&gt;
&lt;p&gt;BDD全称Behavior Driven Development，译作 行为驱动开发，是基于TDD (Test Driven Development 测试驱动开发)的软件开发过程和方法。  &lt;/p&gt;
&lt;p&gt;BDD可以让项目成员（甚至是不懂编程的）使用自然语言来描述系统功能和场景，从而根据这些描述步骤进行系统自动化的测试。  &lt;/p&gt;
&lt;h3&gt;常用BDD框架&lt;/h3&gt;
&lt;p&gt;目前常用的BDD框架有：ruby的cucumber，python的behave、lettuce等。&lt;br&gt;
所实践项目 使用python开发自动化测试代码，故选用behave框架。总结从环境搭建 到运用 以及最后的测试报告集成到Jenkins上展示。  &lt;/p&gt;
&lt;h3&gt;Behave使用介绍&lt;/h3&gt;
&lt;h4&gt;1、安装&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install behave ---首次安装  
pip install -U behave ---更新
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;2、运行第一个测试&lt;/h4&gt;
&lt;p&gt;测试的功能场景——测试网站的登录功能：&lt;br&gt;
账号密码输入正确--登录成功；&lt;br&gt;
账号密码输入错误--登录失败。&lt;/p&gt;
&lt;h5&gt;建立框架结构&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$PROJECT/
+-- features/                   -- Contains all feature files.
|       +-- steps/
|       |     +-- login.py      -- Step definitions for features.
|       +-- reports/            -- Save test reports
|       |      +-- jsonDumps/   -- Save behave json reports
|       |      +-- jsonReports/ -- Save behave to cucumber json reports
|       +-- environment.py      -- Environment for global setup...
|       +-- login.feature       -- Feature files.
&lt;/pre&gt;&lt;/div&gt;


&lt;h6&gt;Behave 框架说明：&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;features/.feature文件用于编写测试场景，可以把各种场景和数据写在里面，支持中文；  &lt;/li&gt;
&lt;li&gt;steps/.py文件就是根据所写的测试场景和数据来执行测试；  &lt;/li&gt;
&lt;li&gt;features/.feature文件与steps/.py文件必须一一对应。  &lt;/li&gt;
&lt;li&gt;features/.environment.py 用作测试环境统一配置。  &lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;environment.py 部分方法说明&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;before_step(context, step), after_step(context, step)&lt;br&gt;
These run before and after every step.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;before_scenario(context, scenario), after_scenario(context, scenario)&lt;br&gt;
These run before and after each scenario is run.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;before_feature(context, feature), after_feature(context, feature)&lt;br&gt;
These run …&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;很久没更博了，不记录点什么会觉得脑子空空的。&lt;br&gt;
前些天在重构接口测试框架的时候，突发奇想的一个念头：就是要采用BDD方式来用作接口测试的数据驱动。于是花了一天时间简单学习了一下python的BDD框架-behave，并做了一个小实践。过程与结果，还算很满意。写此文章，向这些开源工具的贡献者们致敬！  &lt;/p&gt;
&lt;h3&gt;什么是BDD&lt;/h3&gt;
&lt;p&gt;BDD全称Behavior Driven Development，译作 行为驱动开发，是基于TDD (Test Driven Development 测试驱动开发)的软件开发过程和方法。  &lt;/p&gt;
&lt;p&gt;BDD可以让项目成员（甚至是不懂编程的）使用自然语言来描述系统功能和场景，从而根据这些描述步骤进行系统自动化的测试。  &lt;/p&gt;
&lt;h3&gt;常用BDD框架&lt;/h3&gt;
&lt;p&gt;目前常用的BDD框架有：ruby的cucumber，python的behave、lettuce等。&lt;br&gt;
所实践项目 使用python开发自动化测试代码，故选用behave框架。总结从环境搭建 到运用 以及最后的测试报告集成到Jenkins上展示。  &lt;/p&gt;
&lt;h3&gt;Behave使用介绍&lt;/h3&gt;
&lt;h4&gt;1、安装&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install behave ---首次安装  
pip install -U behave ---更新
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;2、运行第一个测试&lt;/h4&gt;
&lt;p&gt;测试的功能场景——测试网站的登录功能：&lt;br&gt;
账号密码输入正确--登录成功；&lt;br&gt;
账号密码输入错误--登录失败。&lt;/p&gt;
&lt;h5&gt;建立框架结构&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$PROJECT/
+-- features/                   -- Contains all feature files.
|       +-- steps/
|       |     +-- login.py      -- Step definitions for features.
|       +-- reports/            -- Save test reports
|       |      +-- jsonDumps/   -- Save behave json reports
|       |      +-- jsonReports/ -- Save behave to cucumber json reports
|       +-- environment.py      -- Environment for global setup...
|       +-- login.feature       -- Feature files.
&lt;/pre&gt;&lt;/div&gt;


&lt;h6&gt;Behave 框架说明：&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;features/.feature文件用于编写测试场景，可以把各种场景和数据写在里面，支持中文；  &lt;/li&gt;
&lt;li&gt;steps/.py文件就是根据所写的测试场景和数据来执行测试；  &lt;/li&gt;
&lt;li&gt;features/.feature文件与steps/.py文件必须一一对应。  &lt;/li&gt;
&lt;li&gt;features/.environment.py 用作测试环境统一配置。  &lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;environment.py 部分方法说明&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;before_step(context, step), after_step(context, step)&lt;br&gt;
These run before and after every step.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;before_scenario(context, scenario), after_scenario(context, scenario)&lt;br&gt;
These run before and after each scenario is run.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;before_feature(context, feature), after_feature(context, feature)&lt;br&gt;
These run before and after each feature file is exercised.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;before_tag(context, tag), after_tag(context, tag)&lt;br&gt;
These run before and after a section tagged with the given name. They are invoked for each tag encountered in the order they’re found in the feature file. See controlling things with tags.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;before_all(context), after_all(context)&lt;br&gt;
These run before and after the whole shooting match.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;此实践Demo的environment.py 的代码：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# coding=utf-8&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;behave2cucumber&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;

&lt;span class="c1"&gt;# 在开始全部的测试之前执行&lt;/span&gt;
&lt;span class="c1"&gt;# 此处为打开浏览器&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;before_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Chrome&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# 在所有的测试完成之后执行&lt;/span&gt;
&lt;span class="c1"&gt;# 此处为关闭浏览器，并将behave 的json报告转化为 cucumber兼容的json报告，便于Jenkins集成展示&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;after_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.\reports\jsonDumps\testResult.json&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;behave_json&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;cucumberJson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;behave2cucumber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;behave_json&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;jsonStr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cucumberJson&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;jsonReport&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.\reports\jsonReports\jsonReport.json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;jsonReport&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jsonStr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;jsonReport&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;编写功能测试用例描述及测试数据&lt;/h5&gt;
&lt;p&gt;打开login.feature文件 写入如下内容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;功能: 登录
  @LoginSuccess
  场景: 登录成功
    假如 打开登录页面
    当 输入用户名admin，密码admin登录
    那么 跳转登录成功页面

  @LoginFailure
  场景大纲: 登录失败
    假如 打开登录页面
    当 用户名为&amp;lt;username&amp;gt;，密码为&amp;lt;password&amp;gt;时
    那么 登录失败，提示&amp;lt;message&amp;gt;

    例子: 登录失败测试用例
    |username   | password    |  message  |
    |admin       |incorrect     |错误：admin 的密码不正确。忘记密码了？|
    |empty       |admin         |错误：用户名一栏为空。          |
    |admin       |empty         |错误：密码一栏为空           |
&lt;/pre&gt;&lt;/div&gt;


&lt;h6&gt;feature文件编写说明：&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;一个feature文件中可以编写多个scenario  &lt;/li&gt;
&lt;li&gt;以@开头的 如@LoginSuccess 为Tags 即标签，再执行测试时可直接指定tag来运行测试用例，命令为behave --tags=LoginSuccess    &lt;/li&gt;
&lt;li&gt;feature文件英文编写格式如下：  &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Feature&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;showing&lt;/span&gt; &lt;span class="n"&gt;off&lt;/span&gt; &lt;span class="n"&gt;behave&lt;/span&gt;

  &lt;span class="n"&gt;Scenario&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;simple&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;
     &lt;span class="n"&gt;Given&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;behave&lt;/span&gt; &lt;span class="n"&gt;installed&lt;/span&gt;
      &lt;span class="n"&gt;when&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="n"&gt;implement&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;
      &lt;span class="n"&gt;then&lt;/span&gt; &lt;span class="n"&gt;behave&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;us&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;

  &lt;span class="n"&gt;Scenario&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;comparison&lt;/span&gt; &lt;span class="n"&gt;two&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;

     &lt;span class="n"&gt;Given&lt;/span&gt; &lt;span class="n"&gt;go&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;login&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;    
      &lt;span class="n"&gt;When&lt;/span&gt; &lt;span class="n"&gt;login&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;  
      &lt;span class="n"&gt;Then&lt;/span&gt; &lt;span class="n"&gt;login&lt;/span&gt; &lt;span class="n"&gt;success&lt;/span&gt;   
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;feature 文件关键词说明：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1)Feature:功能名称；  
2)Scenario:测试场景名称；  
3)Given：给出测试前提条件；  
4)when：相当我们的测试步骤；  
5)Then：给出期望结果。  
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;编写登录用例的测试代码&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#coding=utf-8&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;behave&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="nd"&gt;@given&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;打开登录页面&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;step_impl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://localhost/demo/login.php&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@when&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;输入用户名{username}，密码{password}登录&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;step_impl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user_login&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user_login&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user_pass&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;submit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nd"&gt;@then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;跳转登录成功页面&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;step_impl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;admin&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_url&lt;/span&gt;



&lt;span class="nd"&gt;@when&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;用户名为{username}，密码为{password}时&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;step_impl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;empty&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;empty&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user_login&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user_login&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user_pass&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;submit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nd"&gt;@then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;登录失败，提示{message}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;step_impl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;displayed_msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;login_error&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;displayed_msg&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;执行测试&lt;/h5&gt;
&lt;p&gt;进入项目根目录 PROJECT/下面，执行命令behave 即执行测试
如果要将测试结果输出为json文件，则可执行：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;behave --lang zh-CN -f json.pretty -o &lt;span class="s1"&gt;&amp;#39;./reports/jsonDumps/testResult.json&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;备注：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;--lang zh-CN, feature用例描述文件内容为中文的，必须使用此参数 执行文件，否则失败
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;behave 其他执行命令参数 可查阅官方文档&lt;br&gt;
&lt;a href="http://pythonhosted.org/behave/behave.html#command-line-arguments"&gt;http://pythonhosted.org/behave/behave.html#command-line-arguments&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Behave测试报告展示&lt;/h4&gt;
&lt;p&gt;前置条件：&lt;br&gt;
1）已搭建好Jenkins环境&lt;br&gt;
2）Jenkins中的 cucumber reports插件已安装好  &lt;/p&gt;
&lt;p&gt;此任务只用作报告的展示，配置十分简单！具体功能根据实际需求另做配置！  &lt;/p&gt;
&lt;p&gt;配置步骤：&lt;br&gt;
1、打开Jenkins，新建一个任务，输入任务名称-BDDTest&lt;br&gt;
2、源码管理、构建触发器、构建环境、构建等模块均默认不修改&lt;br&gt;
3、在构建后操作 模块中，选择【增加构建后操作步骤】--Cucumber reports&lt;br&gt;
4、打开Cucumber report 的高级选项，配置behave执行测试完成后，经转化后被cucumber所兼容的json报告所在路径  &lt;/p&gt;
&lt;p&gt;&lt;img alt="01" src="/postsimage/behaveTest/behaveReportPath.png"&gt;  &lt;br&gt;
5、保存job&lt;br&gt;
6、打开job查看，会发现在页面中出现 cucumber reports 图标  ，说明配置成功&lt;br&gt;
&lt;img alt="02" src="/postsimage/behaveTest/reportIcon.png"&gt;   &lt;/p&gt;
&lt;p&gt;立即构建&lt;br&gt;
在Jenkins中打开任务，点击立即构建，等待构建成功结束&lt;br&gt;
构建结束后，点击构建历史，查看测试报告  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;概览&lt;br&gt;
&lt;img alt="03" src="/postsimage/behaveTest/featureReport.png"&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tags报告&lt;br&gt;
&lt;img alt="04" src="/postsimage/behaveTest/tagsReport.png"&gt;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;详细步骤执行情况&lt;br&gt;
&lt;img alt="05" src="/postsimage/behaveTest/stepsReport.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;整个behave框架实践过程与结果的总结，就写到这吧。&lt;br&gt;
当然 BDD的知识远远不止文中提到的这些，它更多强大的功能还需再今后的实践运用中发掘与总结。&lt;br&gt;
愿 每天的我们 都在不断进步！ &lt;/p&gt;</content><category term="[BDD]"></category></entry><entry><title>用Shell部署测试环境</title><link href="https://xmenfolk.github.io/posts/theDeploymentEnvironment/" rel="alternate"></link><published>2016-05-04T00:00:00-03:00</published><updated>2016-05-04T00:00:00-03:00</updated><author><name>Angie</name></author><id>tag:xmenfolk.github.io,2016-05-04:/posts/theDeploymentEnvironment/</id><summary type="html">&lt;h4&gt;测试环境介绍&lt;/h4&gt;
&lt;p&gt;Testing environment（测试环境）是指测试运行其上的软件和硬件环境的描述，以及任何其它与被测软件交互的软件，包括驱动和桩。&lt;br&gt;
测试环境=软件+硬件+网络+数据准备+测试工具&lt;br&gt;
以上为百科定义  &lt;/p&gt;
&lt;p&gt;说的通俗一点，测试环境就是为了测试一个系统而应该具备的所有初始条件.&lt;br&gt;
比如说---喝水，必须有：喝水的东西（软硬件）、水（数据）...  &lt;/p&gt;
&lt;h4&gt;项目环境举例&lt;/h4&gt;
&lt;p&gt;服务端开发语言：Java&lt;br&gt;
Web应用服务器：Tomcat&lt;br&gt;
项目构建工具：Maven&lt;br&gt;
数据库：Mysql&lt;br&gt;
版本控制：Git&lt;br&gt;
...&lt;br&gt;
如上环境所需的工具安装不再啰嗦，下面简述一下服务端代码的整个部署过程：  &lt;/p&gt;
&lt;p&gt;1、开发童鞋提交最新代码&lt;br&gt;
2、QA合并代码到测试专用分支&lt;br&gt;
3、QA童鞋需要登录测试机并从测试分支上拉取代码到本地&lt;br&gt;
4、打包代码（war包）&lt;br&gt;
5、将War包Copy到Tomcat的webapps目录下&lt;br&gt;
6、重启Tomcat...可以在启动时查看其日志/logs/catalina.out  &lt;/p&gt;
&lt;h4&gt;Shell脚本一键部署&lt;/h4&gt;
&lt;p&gt;开发童鞋每一次提交，QA都需要重新部署一遍。一次两次没事，一天好几次你就能尝到那种头冒烟的感觉了。&lt;br&gt;
所以啊，该懒还得懒。这些重复性的劳动就交给机器去执行吧...&lt;br&gt;
挤出来的时间来杯Coffee还是可以的 哈哈  &lt;/p&gt;
&lt;p&gt;开发每次提交代码后，只需执行一下脚本即可完成部署，是不是很省心呢~&lt;br&gt;
Shell就是这么 牛掰  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="c1"&gt;#进入到工程目录&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; /data/testProject

&lt;span class="c1"&gt;#切到qa分支&lt;/span&gt;
git checkout qapri/test

&lt;span class="c1"&gt;#从当前qa分支上拉取最新代码&lt;/span&gt;
git pull

&lt;span class="c1"&gt;#进入到工程目录&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; /data/testProject/

&lt;span class="c1"&gt;#用mvn clean package命令清除之前的war包并重新打包。&lt;/span&gt;
&lt;span class="c1"&gt;#-Dmaven.test.skip过滤测试用例。&lt;/span&gt;
&lt;span class="c1"&gt;#-U从Mav仓库强制更新依赖包&lt;/span&gt;
mvn clean package -Dmaven.test.skip -U

&lt;span class="c1"&gt;#获取XX工程的进程号&lt;/span&gt;
&lt;span class="nv"&gt;APIPROCESS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;ps -ef &lt;span class="p"&gt;|&lt;/span&gt; grep java &lt;span class="p"&gt;|&lt;/span&gt; grep tomcat_testProject/ &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;{print $2}&amp;#39;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;

&lt;span class="c1"&gt;#输出进程号&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$APIPROCESS&lt;/span&gt;

&lt;span class="c1"&gt;#判断进程号是否真实存在，不为空则Kill掉&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$APIPROCESS&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="nb"&gt;kill&lt;/span&gt; -9 &lt;span class="nv"&gt;$APIPROCESS&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="c1"&gt;#删除当前项目tomcat webapps目录下的所有文件&lt;/span&gt;
rm -rf /data/tomcat/tomcat_testProject/webapps/*

&lt;span class="c1"&gt;#拷贝工程war包到tomcat中的web目录&lt;/span&gt;
cp /data/car-home/car-home-api/target/ROOT.war /data/tomcat/tomcat_testProject/webapps

&lt;span class="c1"&gt;#进入到项目tomcat bin目录下&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; /data/tomcat/tomcat_testProject/bin …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h4&gt;测试环境介绍&lt;/h4&gt;
&lt;p&gt;Testing environment（测试环境）是指测试运行其上的软件和硬件环境的描述，以及任何其它与被测软件交互的软件，包括驱动和桩。&lt;br&gt;
测试环境=软件+硬件+网络+数据准备+测试工具&lt;br&gt;
以上为百科定义  &lt;/p&gt;
&lt;p&gt;说的通俗一点，测试环境就是为了测试一个系统而应该具备的所有初始条件.&lt;br&gt;
比如说---喝水，必须有：喝水的东西（软硬件）、水（数据）...  &lt;/p&gt;
&lt;h4&gt;项目环境举例&lt;/h4&gt;
&lt;p&gt;服务端开发语言：Java&lt;br&gt;
Web应用服务器：Tomcat&lt;br&gt;
项目构建工具：Maven&lt;br&gt;
数据库：Mysql&lt;br&gt;
版本控制：Git&lt;br&gt;
...&lt;br&gt;
如上环境所需的工具安装不再啰嗦，下面简述一下服务端代码的整个部署过程：  &lt;/p&gt;
&lt;p&gt;1、开发童鞋提交最新代码&lt;br&gt;
2、QA合并代码到测试专用分支&lt;br&gt;
3、QA童鞋需要登录测试机并从测试分支上拉取代码到本地&lt;br&gt;
4、打包代码（war包）&lt;br&gt;
5、将War包Copy到Tomcat的webapps目录下&lt;br&gt;
6、重启Tomcat...可以在启动时查看其日志/logs/catalina.out  &lt;/p&gt;
&lt;h4&gt;Shell脚本一键部署&lt;/h4&gt;
&lt;p&gt;开发童鞋每一次提交，QA都需要重新部署一遍。一次两次没事，一天好几次你就能尝到那种头冒烟的感觉了。&lt;br&gt;
所以啊，该懒还得懒。这些重复性的劳动就交给机器去执行吧...&lt;br&gt;
挤出来的时间来杯Coffee还是可以的 哈哈  &lt;/p&gt;
&lt;p&gt;开发每次提交代码后，只需执行一下脚本即可完成部署，是不是很省心呢~&lt;br&gt;
Shell就是这么 牛掰  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="c1"&gt;#进入到工程目录&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; /data/testProject

&lt;span class="c1"&gt;#切到qa分支&lt;/span&gt;
git checkout qapri/test

&lt;span class="c1"&gt;#从当前qa分支上拉取最新代码&lt;/span&gt;
git pull

&lt;span class="c1"&gt;#进入到工程目录&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; /data/testProject/

&lt;span class="c1"&gt;#用mvn clean package命令清除之前的war包并重新打包。&lt;/span&gt;
&lt;span class="c1"&gt;#-Dmaven.test.skip过滤测试用例。&lt;/span&gt;
&lt;span class="c1"&gt;#-U从Mav仓库强制更新依赖包&lt;/span&gt;
mvn clean package -Dmaven.test.skip -U

&lt;span class="c1"&gt;#获取XX工程的进程号&lt;/span&gt;
&lt;span class="nv"&gt;APIPROCESS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;ps -ef &lt;span class="p"&gt;|&lt;/span&gt; grep java &lt;span class="p"&gt;|&lt;/span&gt; grep tomcat_testProject/ &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;{print $2}&amp;#39;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;

&lt;span class="c1"&gt;#输出进程号&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$APIPROCESS&lt;/span&gt;

&lt;span class="c1"&gt;#判断进程号是否真实存在，不为空则Kill掉&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$APIPROCESS&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="nb"&gt;kill&lt;/span&gt; -9 &lt;span class="nv"&gt;$APIPROCESS&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="c1"&gt;#删除当前项目tomcat webapps目录下的所有文件&lt;/span&gt;
rm -rf /data/tomcat/tomcat_testProject/webapps/*

&lt;span class="c1"&gt;#拷贝工程war包到tomcat中的web目录&lt;/span&gt;
cp /data/car-home/car-home-api/target/ROOT.war /data/tomcat/tomcat_testProject/webapps

&lt;span class="c1"&gt;#进入到项目tomcat bin目录下&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; /data/tomcat/tomcat_testProject/bin/

&lt;span class="c1"&gt;#启动tomcat,同时 实时查看启动日志&lt;/span&gt;
sh /data/tomcat/tomcat_testProject/bin/startup.sh &lt;span class="p"&gt;;&lt;/span&gt;tailf ../logs/catalina.out
&lt;/pre&gt;&lt;/div&gt;</content><category term="[shell]"></category></entry><entry><title>接口测试之基础篇</title><link href="https://xmenfolk.github.io/posts/intefacetestBase/" rel="alternate"></link><published>2016-04-20T00:00:00-03:00</published><updated>2016-04-20T00:00:00-03:00</updated><author><name>Angie</name></author><id>tag:xmenfolk.github.io,2016-04-20:/posts/intefacetestBase/</id><summary type="html">&lt;h4&gt;接口测试简介&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;百度百科中为接口测试给出的定义：&lt;br&gt;
接口测试是测试系统组件间接口的一种测试。&lt;br&gt;
接口测试主要用于检测外部系统与系统之间以及内部各个子系统之间的交互点。&lt;br&gt;
测试的重点是要检查数据的交换，传递和控制管理过程，以及系统间的相互逻辑依赖关系等。  &lt;/li&gt;
&lt;li&gt;接口测试通常包括两类，模块之间的接口测试和 Web 接口测试。&lt;br&gt;
前者通常是由开发人员在单元测试中进行测试，后者则通常由测试人员进行测试。&lt;br&gt;
后面的内容主要为 Web 接口测试。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;接口测试的意义&lt;/h4&gt;
&lt;p&gt;测试人员都知道，在整个软件生命周期中，测试介入的越早，成本越低，收益越好。&lt;br&gt;
通常，前端的实现，依赖于后端的接口，测试人员需要在开发人员输出接口文档后，就立即开始设计接口测试用例，在开发人员将接口开发完成后，就可以进行接口测试了。&lt;br&gt;
接口测试，可以提前暴露很多问题，此时开发解决问题，相对在前端的功能测试中发现的问题，其代价要小的多。接口的正确和稳定，会为后面前端的功能测试减少很大一部分工作量。另外接口的自动化、持续集成也相对的比较容易去实现。&lt;/p&gt;
&lt;h4&gt;接口测试的内容&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;测试返回值是否正确&lt;/li&gt;
&lt;li&gt;测试返回值类型是否符合设计文档&lt;/li&gt;
&lt;li&gt;测试返回的 error 信息是否符合设计&lt;/li&gt;
&lt;li&gt;对输入进行类型、边界测试，测试接口是否有对异常数据做处理&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;需要掌握或了解的知识&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;了解后端常用开发语言，java、php、python 等&lt;/li&gt;
&lt;li&gt;了解各种开发语言的某些特性。比如在 php 中的 empty() 方法，有开发同学会用这个方法判断一个字符串是否为空，但这里如果传入的值为0，empty 方法也会判断为空，即 empty(0) 返回的值为 true！因此设计接口用例的时候，要增加此类含有特殊值的 case&lt;/li&gt;
&lt;li&gt;了解 tcp/ip、http、https 协议&lt;/li&gt;
&lt;li&gt;掌握常用的请求方式，get、post、put&lt;/li&gt;
&lt;li&gt;掌握 json、xml、html 的语法&lt;/li&gt;
&lt;li&gt;掌握常用的抓包方法&lt;/li&gt;
&lt;li&gt;掌握基本的增删改查 sql 语句&lt;/li&gt;
&lt;li&gt;掌握一种语言，python、java 或其他语言&lt;/li&gt;
&lt;li&gt;掌握 jenkins 环境的搭建&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;接口测试工具&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Postman&lt;/li&gt;
&lt;li&gt;Jmeter&lt;/li&gt;
&lt;li&gt;SoapUI&lt;/li&gt;
&lt;li&gt;Fitnesse&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;接口测试框架或测试库&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;RobotFramework&lt;/li&gt;
&lt;li&gt;python 的 requests&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;其他开源库&lt;/h4&gt;
&lt;p&gt;moco&lt;/p&gt;</summary><content type="html">&lt;h4&gt;接口测试简介&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;百度百科中为接口测试给出的定义：&lt;br&gt;
接口测试是测试系统组件间接口的一种测试。&lt;br&gt;
接口测试主要用于检测外部系统与系统之间以及内部各个子系统之间的交互点。&lt;br&gt;
测试的重点是要检查数据的交换，传递和控制管理过程，以及系统间的相互逻辑依赖关系等。  &lt;/li&gt;
&lt;li&gt;接口测试通常包括两类，模块之间的接口测试和 Web 接口测试。&lt;br&gt;
前者通常是由开发人员在单元测试中进行测试，后者则通常由测试人员进行测试。&lt;br&gt;
后面的内容主要为 Web 接口测试。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;接口测试的意义&lt;/h4&gt;
&lt;p&gt;测试人员都知道，在整个软件生命周期中，测试介入的越早，成本越低，收益越好。&lt;br&gt;
通常，前端的实现，依赖于后端的接口，测试人员需要在开发人员输出接口文档后，就立即开始设计接口测试用例，在开发人员将接口开发完成后，就可以进行接口测试了。&lt;br&gt;
接口测试，可以提前暴露很多问题，此时开发解决问题，相对在前端的功能测试中发现的问题，其代价要小的多。接口的正确和稳定，会为后面前端的功能测试减少很大一部分工作量。另外接口的自动化、持续集成也相对的比较容易去实现。&lt;/p&gt;
&lt;h4&gt;接口测试的内容&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;测试返回值是否正确&lt;/li&gt;
&lt;li&gt;测试返回值类型是否符合设计文档&lt;/li&gt;
&lt;li&gt;测试返回的 error 信息是否符合设计&lt;/li&gt;
&lt;li&gt;对输入进行类型、边界测试，测试接口是否有对异常数据做处理&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;需要掌握或了解的知识&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;了解后端常用开发语言，java、php、python 等&lt;/li&gt;
&lt;li&gt;了解各种开发语言的某些特性。比如在 php 中的 empty() 方法，有开发同学会用这个方法判断一个字符串是否为空，但这里如果传入的值为0，empty 方法也会判断为空，即 empty(0) 返回的值为 true！因此设计接口用例的时候，要增加此类含有特殊值的 case&lt;/li&gt;
&lt;li&gt;了解 tcp/ip、http、https 协议&lt;/li&gt;
&lt;li&gt;掌握常用的请求方式，get、post、put&lt;/li&gt;
&lt;li&gt;掌握 json、xml、html 的语法&lt;/li&gt;
&lt;li&gt;掌握常用的抓包方法&lt;/li&gt;
&lt;li&gt;掌握基本的增删改查 sql 语句&lt;/li&gt;
&lt;li&gt;掌握一种语言，python、java 或其他语言&lt;/li&gt;
&lt;li&gt;掌握 jenkins 环境的搭建&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;接口测试工具&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Postman&lt;/li&gt;
&lt;li&gt;Jmeter&lt;/li&gt;
&lt;li&gt;SoapUI&lt;/li&gt;
&lt;li&gt;Fitnesse&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;接口测试框架或测试库&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;RobotFramework&lt;/li&gt;
&lt;li&gt;python 的 requests&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;其他开源库&lt;/h4&gt;
&lt;p&gt;moco&lt;/p&gt;</content><category term="[接口测试]"></category></entry><entry><title>接口测试之实例篇</title><link href="https://xmenfolk.github.io/posts/intefacetestExample/" rel="alternate"></link><published>2016-04-20T00:00:00-03:00</published><updated>2016-04-20T00:00:00-03:00</updated><author><name>Angie</name></author><id>tag:xmenfolk.github.io,2016-04-20:/posts/intefacetestExample/</id><summary type="html">&lt;h4&gt;一、测试需求描述&lt;/h4&gt;
&lt;p&gt;1、 本次测试的接口为http服务端接口&lt;br&gt;
  2、 接口的主要分成两类，一类提供给查询功能接口，一类提供保存数据功能接口，这里我们举例2个保存数据的接口，因为这两个接口有关联性，比较有代表性；&lt;br&gt;
  3、接口描述：  &lt;/p&gt;
&lt;p&gt;保存信用卡账户信息接口：&lt;br&gt;
传入参数：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;args=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;quot;clientNo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;434343556&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;quot;alias&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;**信用卡2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;quot;cardName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;长城*****卡2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;quot;cardNo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;25622356788251&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;传出参数：&lt;br&gt;
1)保存成功：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;returnCode&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;returnMsg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;保存成功&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2)保存失败：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;returnCode&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;returnMsg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;保存失败&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;保存逻辑：数据传入进来，验证通过，保存到信用卡账户表中&lt;/p&gt;
&lt;p&gt;保存信用卡账单接口：
传入参数：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;args=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;quot;clientNo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;434343556&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;quot;accountName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;测试&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;quot;billDate&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;08&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;quot;billMonth&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;201509&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;quot;cardNo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;25622356788251&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;quot;currentPayment&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;欠款459.80&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;quot;paymentDate&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2015-09-25 09:00:00&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;传出参数：&lt;br&gt;
1)保存成功：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;returnCode&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;returnMsg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;保存成功&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2)保存失败：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;returnCode&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;returnMsg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;保存失败&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;保存逻辑：保存时先去信用卡信息表查看clientNo对应的表是否存在，如存在则数据校验通过，将数据保存进入信用卡账单表&lt;/p&gt;
&lt;p&gt;注：这个保存逻辑在接口开发设计文档中可能没有写或写的不详细，这时要与开发接口人员或产品人员多多沟通去熟悉接口逻辑&lt;/p&gt;
&lt;h4&gt;二、测试分析&lt;/h4&gt;
&lt;p&gt;1、逻辑分析&lt;br&gt;
      1)、从保存逻辑上来看，这两个接口明显是有依赖关系的，所以我们先测试信用卡账户信息接口，再测试保存信用卡账单接口&lt;br&gt;
      2)、接口传入的数据，最终是保存到数据库中，所以当接口返回保存成功的时候，我们也要去对应的数据库表中核对相应的数据(这里可以用jmeter链接数据库进行操作代理手工)&lt;br&gt;
      3)、当出现保存失败的情况时，我们需要查看系统的日志，所以我们也要准备好查看日志的权限和地址  &lt;/p&gt;
&lt;p&gt;2、测试工具的准备&lt;br&gt;
      1)、单个接口测试，使用poster/postman&lt;br&gt;
      2)、多个接口测试，我们使用Jmeter进行测试  &lt;/p&gt;
&lt;h4&gt;三、使用工具测试&lt;/h4&gt;
&lt;p&gt;本实例中使用Jmeter对接口进行测试  &lt;/p&gt;
&lt;p&gt;首先我们说一下为什么用Poster测试后我们还要用Jmeter做接口测试，在用poster测试时候会发现的是一个接口一个接口的测试，我们每次测试成功后的数据，在工具中是无法保存的，再次测试的时候我们还要重新输入测试的数据，当我们测试一个接口的时候可能感觉不明显，但是当你测试几十个接口的时候，你就会发现使用Jmeter的好处，如果按测试阶段来说冒烟测试我们用poster，集成测试我们用Jmeter  &lt;/p&gt;
&lt;h4&gt;四、使用Jmeter接口测试&lt;/h4&gt;
&lt;p&gt;1、首先邮件添加一个线程组，这里我们重命名InterfaceTest&lt;br&gt;
&lt;img alt="01" src="/postsimage/post01/01.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="02" src="/postsimage/post01/02.png"&gt;&lt;/p&gt;
&lt;p&gt;2、在线程组上添加一个Http默认请求，并配置服务器的IP地址和传输编码  &lt;/p&gt;
&lt;p&gt;&lt;img alt="03" src="/postsimage/post01/03.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="04" src="/postsimage/post01/04.png"&gt;&lt;/p&gt;
&lt;p&gt;3、在线程组中添加一个HTTP请求，这里我们重命名“增加信用卡账户信息接口”&lt;/p&gt;
&lt;p&gt;&lt;img alt="05" src="/postsimage/post01/05.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="06" src="/postsimage/post01/06.png"&gt;&lt;/p&gt;
&lt;p&gt;4、配置接口请求信息，这配置示例如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="07" src="/postsimage/post01/07.png"&gt;&lt;/p&gt;
&lt;p&gt;5、在保存信用卡账单接口请求，示例如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="08" src="/postsimage/post01/08.png"&gt;&lt;/p&gt;
&lt;p&gt;注：由于Jmeter请求线程组内的请求时从第一个开始执行，所以我们将需要最先执行的请求放在前面&lt;/p&gt;
&lt;p&gt;6、在线程组上添加监听器，察看结果树和聚合报告&lt;/p&gt;
&lt;p&gt;&lt;img alt="09" src="/postsimage/post01/09.png"&gt;&lt;/p&gt;
&lt;p&gt;7、点击启动 …&lt;/p&gt;</summary><content type="html">&lt;h4&gt;一、测试需求描述&lt;/h4&gt;
&lt;p&gt;1、 本次测试的接口为http服务端接口&lt;br&gt;
  2、 接口的主要分成两类，一类提供给查询功能接口，一类提供保存数据功能接口，这里我们举例2个保存数据的接口，因为这两个接口有关联性，比较有代表性；&lt;br&gt;
  3、接口描述：  &lt;/p&gt;
&lt;p&gt;保存信用卡账户信息接口：&lt;br&gt;
传入参数：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;args=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;quot;clientNo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;434343556&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;quot;alias&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;**信用卡2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;quot;cardName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;长城*****卡2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;quot;cardNo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;25622356788251&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;传出参数：&lt;br&gt;
1)保存成功：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;returnCode&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;returnMsg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;保存成功&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2)保存失败：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;returnCode&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;returnMsg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;保存失败&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;保存逻辑：数据传入进来，验证通过，保存到信用卡账户表中&lt;/p&gt;
&lt;p&gt;保存信用卡账单接口：
传入参数：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;args=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;quot;clientNo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;434343556&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;quot;accountName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;测试&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;quot;billDate&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;08&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;quot;billMonth&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;201509&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;quot;cardNo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;25622356788251&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;quot;currentPayment&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;欠款459.80&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;quot;paymentDate&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2015-09-25 09:00:00&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;传出参数：&lt;br&gt;
1)保存成功：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;returnCode&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;returnMsg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;保存成功&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2)保存失败：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;returnCode&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;returnMsg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;保存失败&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;保存逻辑：保存时先去信用卡信息表查看clientNo对应的表是否存在，如存在则数据校验通过，将数据保存进入信用卡账单表&lt;/p&gt;
&lt;p&gt;注：这个保存逻辑在接口开发设计文档中可能没有写或写的不详细，这时要与开发接口人员或产品人员多多沟通去熟悉接口逻辑&lt;/p&gt;
&lt;h4&gt;二、测试分析&lt;/h4&gt;
&lt;p&gt;1、逻辑分析&lt;br&gt;
      1)、从保存逻辑上来看，这两个接口明显是有依赖关系的，所以我们先测试信用卡账户信息接口，再测试保存信用卡账单接口&lt;br&gt;
      2)、接口传入的数据，最终是保存到数据库中，所以当接口返回保存成功的时候，我们也要去对应的数据库表中核对相应的数据(这里可以用jmeter链接数据库进行操作代理手工)&lt;br&gt;
      3)、当出现保存失败的情况时，我们需要查看系统的日志，所以我们也要准备好查看日志的权限和地址  &lt;/p&gt;
&lt;p&gt;2、测试工具的准备&lt;br&gt;
      1)、单个接口测试，使用poster/postman&lt;br&gt;
      2)、多个接口测试，我们使用Jmeter进行测试  &lt;/p&gt;
&lt;h4&gt;三、使用工具测试&lt;/h4&gt;
&lt;p&gt;本实例中使用Jmeter对接口进行测试  &lt;/p&gt;
&lt;p&gt;首先我们说一下为什么用Poster测试后我们还要用Jmeter做接口测试，在用poster测试时候会发现的是一个接口一个接口的测试，我们每次测试成功后的数据，在工具中是无法保存的，再次测试的时候我们还要重新输入测试的数据，当我们测试一个接口的时候可能感觉不明显，但是当你测试几十个接口的时候，你就会发现使用Jmeter的好处，如果按测试阶段来说冒烟测试我们用poster，集成测试我们用Jmeter  &lt;/p&gt;
&lt;h4&gt;四、使用Jmeter接口测试&lt;/h4&gt;
&lt;p&gt;1、首先邮件添加一个线程组，这里我们重命名InterfaceTest&lt;br&gt;
&lt;img alt="01" src="/postsimage/post01/01.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="02" src="/postsimage/post01/02.png"&gt;&lt;/p&gt;
&lt;p&gt;2、在线程组上添加一个Http默认请求，并配置服务器的IP地址和传输编码  &lt;/p&gt;
&lt;p&gt;&lt;img alt="03" src="/postsimage/post01/03.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="04" src="/postsimage/post01/04.png"&gt;&lt;/p&gt;
&lt;p&gt;3、在线程组中添加一个HTTP请求，这里我们重命名“增加信用卡账户信息接口”&lt;/p&gt;
&lt;p&gt;&lt;img alt="05" src="/postsimage/post01/05.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="06" src="/postsimage/post01/06.png"&gt;&lt;/p&gt;
&lt;p&gt;4、配置接口请求信息，这配置示例如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="07" src="/postsimage/post01/07.png"&gt;&lt;/p&gt;
&lt;p&gt;5、在保存信用卡账单接口请求，示例如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="08" src="/postsimage/post01/08.png"&gt;&lt;/p&gt;
&lt;p&gt;注：由于Jmeter请求线程组内的请求时从第一个开始执行，所以我们将需要最先执行的请求放在前面&lt;/p&gt;
&lt;p&gt;6、在线程组上添加监听器，察看结果树和聚合报告&lt;/p&gt;
&lt;p&gt;&lt;img alt="09" src="/postsimage/post01/09.png"&gt;&lt;/p&gt;
&lt;p&gt;7、点击启动，运行结束后查看，结果树和聚合报告&lt;/p&gt;
&lt;p&gt;&lt;img alt="10" src="/postsimage/post01/10.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="11" src="/postsimage/post01/11.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="12" src="/postsimage/post01/12.png"&gt;&lt;/p&gt;
&lt;p&gt;8、去数据库中核对数据&lt;/p&gt;
&lt;p&gt;9、大批量数据制造
      思路：
   1)、可参数化的参数，保存信用卡账户信息接口(clientNo,cardNo），保存信用卡账单接口(clientNo,cardNo,billMonth，paymentDate）
   2)、两个接口的依赖关系，保存信用卡账单接口(clientNo,cardNo）要和信用卡账户信息接口(clientNo,cardNo）的两个相同，也就是说这两个要用一个参数，且还不能重复
   根据上面两个特点，(clientNo,cardNo）我们选取使用计数器，每循环一次计数器加1，那么我们将线程组设置循环执行1万次；billMonth，paymentDate，这两个日期我们是使用随机函数${__Random(1,9,)}，将月份参数化；
   3)、在线程组上创建计数器，配置如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="13" src="/postsimage/post01/13.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="14" src="/postsimage/post01/14.png"&gt;&lt;/p&gt;
&lt;p&gt;4)、引用计数器和随机函数
信用卡账户接口传入参数&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;args=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;quot;clientNo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;${add}434343556&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;quot;alias&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;**信用卡2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;quot;cardName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;长城*****卡2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;quot;cardNo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;${add}25622356788251&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;账单接口传入参数&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;args=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;quot;clientNo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;${add}434343556&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;quot;accountName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;测试&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;quot;billDate&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;08&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;quot;billMonth&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;20150${__Random(1,9,)}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;quot;cardNo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;${add}25622356788251&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;quot;currentPayment&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;欠款459.80&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;quot;paymentDate&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2015-0${__Random(1,9,)}-25 09:00:00&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;5)、设置线程组循环测试，点击运行,查看运行结果，再去数据库看看，大批量数据就这样产生了&lt;/p&gt;
&lt;p&gt;&lt;img alt="15" src="/postsimage/post01/15.png"&gt;&lt;/p&gt;</content><category term="[接口测试]"></category></entry><entry><title>接口测试之Moco篇</title><link href="https://xmenfolk.github.io/posts/intefacetestMock/" rel="alternate"></link><published>2016-04-20T00:00:00-03:00</published><updated>2016-04-20T00:00:00-03:00</updated><author><name>Angie</name></author><id>tag:xmenfolk.github.io,2016-04-20:/posts/intefacetestMock/</id><summary type="html">&lt;h4&gt;Moco 简介&lt;/h4&gt;
&lt;p&gt;Moco 的作者是郑晔，该框架还在 JavaOne 2013 大会上获过奖。&lt;br&gt;
简单的说，Moco 是一个搭建模拟服务器的工具，其支持 API 和独立运行两种方式，前者通常是在 junit 等测试框架中使用，后者则是通过运行一个 jar 包开启服务。&lt;br&gt;
Moco 能帮助解决开发中的哪些问题？作者的回答如下：    &lt;/p&gt;
&lt;p&gt;Moco是针对HTTP集成而生的，不过，现在也有人把它用在其它需要一个模拟服务器的场景中。比如，在移动开发中，有人开发一个移动应用，需要有一个远端服务，但在开发时，这个服务还不存在，他就用Moco模拟了一个服务，保证移动应用可以顺利的开发。同样，也有人把它用在Web前端开发里，当我们的页面需要通过与服务器交互时，就可以用Moco模拟这样一个服务。这种做法在开发一个页面原型时，非常有用，因为那个时候，我们还来不及开发一个完整的服务。&lt;/p&gt;
&lt;h4&gt;Moco 用于接口测试&lt;/h4&gt;
&lt;p&gt;既然开发人员可以通过 Moco 模拟一个还不存在的服务来进行开发、调试，那对于接口测试来说，也可以模拟一个服务进行测试。
一般而言，在项目的接口文档输出后，开发人员会进行接口开发工作，测人员会进行接口用例的设计，但往往完成用例设计会先于接口开发工作，此时如果要进行接口用例的执行，则前提是开发人员完成接口开发工作。
而通过 Moco 框架，就可以在接口文档输出后，在接口开发、接口用例设计的同时，使用 Moco 搭建一个模拟服务器，这样在用例设计完成后，即使接口开发工作还未完成，也可以立即进行执行接口用例，在这个过程中可以修改、补充用例，如此的话，在接口开发完成以后，只需要简单的去执行所有的用例就 OK，省去了很大的工作量，并且这些完善的用例，用自动化去执行，效果更佳。&lt;/p&gt;
&lt;h4&gt;开始使用 Moco&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;github 地址：&lt;a href="https://github.com/dreamhead/moco" target="_blank"&gt;Moco&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在项目的 readme 中找到 Quick Start，Download Standalone Moco Runner&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;新建一个 test.json：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;response&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello, Moco&amp;quot;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;启动服务，端口号可自己设置&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt; &lt;span class="n"&gt;moco&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;runner&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.10.2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;standalone&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;jar&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="mi"&gt;12306&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;json&lt;/span&gt;
&lt;span class="mi"&gt;29&lt;/span&gt; &lt;span class="n"&gt;一月&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="n"&gt;INFO&lt;/span&gt;  &lt;span class="n"&gt;Server&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;started&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mi"&gt;12306&lt;/span&gt;
&lt;span class="mi"&gt;29&lt;/span&gt; &lt;span class="n"&gt;一月&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="n"&gt;INFO&lt;/span&gt;  &lt;span class="n"&gt;Shutdown&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="mi"&gt;63643&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;在浏览器中访问 http://localhost:12306， 将会在页面上显示 Hello,Moco&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;配置 …&lt;/p&gt;</summary><content type="html">&lt;h4&gt;Moco 简介&lt;/h4&gt;
&lt;p&gt;Moco 的作者是郑晔，该框架还在 JavaOne 2013 大会上获过奖。&lt;br&gt;
简单的说，Moco 是一个搭建模拟服务器的工具，其支持 API 和独立运行两种方式，前者通常是在 junit 等测试框架中使用，后者则是通过运行一个 jar 包开启服务。&lt;br&gt;
Moco 能帮助解决开发中的哪些问题？作者的回答如下：    &lt;/p&gt;
&lt;p&gt;Moco是针对HTTP集成而生的，不过，现在也有人把它用在其它需要一个模拟服务器的场景中。比如，在移动开发中，有人开发一个移动应用，需要有一个远端服务，但在开发时，这个服务还不存在，他就用Moco模拟了一个服务，保证移动应用可以顺利的开发。同样，也有人把它用在Web前端开发里，当我们的页面需要通过与服务器交互时，就可以用Moco模拟这样一个服务。这种做法在开发一个页面原型时，非常有用，因为那个时候，我们还来不及开发一个完整的服务。&lt;/p&gt;
&lt;h4&gt;Moco 用于接口测试&lt;/h4&gt;
&lt;p&gt;既然开发人员可以通过 Moco 模拟一个还不存在的服务来进行开发、调试，那对于接口测试来说，也可以模拟一个服务进行测试。
一般而言，在项目的接口文档输出后，开发人员会进行接口开发工作，测人员会进行接口用例的设计，但往往完成用例设计会先于接口开发工作，此时如果要进行接口用例的执行，则前提是开发人员完成接口开发工作。
而通过 Moco 框架，就可以在接口文档输出后，在接口开发、接口用例设计的同时，使用 Moco 搭建一个模拟服务器，这样在用例设计完成后，即使接口开发工作还未完成，也可以立即进行执行接口用例，在这个过程中可以修改、补充用例，如此的话，在接口开发完成以后，只需要简单的去执行所有的用例就 OK，省去了很大的工作量，并且这些完善的用例，用自动化去执行，效果更佳。&lt;/p&gt;
&lt;h4&gt;开始使用 Moco&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;github 地址：&lt;a href="https://github.com/dreamhead/moco" target="_blank"&gt;Moco&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在项目的 readme 中找到 Quick Start，Download Standalone Moco Runner&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;新建一个 test.json：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;response&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello, Moco&amp;quot;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;启动服务，端口号可自己设置&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt; &lt;span class="n"&gt;moco&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;runner&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.10.2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;standalone&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;jar&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="mi"&gt;12306&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;json&lt;/span&gt;
&lt;span class="mi"&gt;29&lt;/span&gt; &lt;span class="n"&gt;一月&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="n"&gt;INFO&lt;/span&gt;  &lt;span class="n"&gt;Server&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;started&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mi"&gt;12306&lt;/span&gt;
&lt;span class="mi"&gt;29&lt;/span&gt; &lt;span class="n"&gt;一月&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="n"&gt;INFO&lt;/span&gt;  &lt;span class="n"&gt;Shutdown&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="mi"&gt;63643&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;在浏览器中访问 http://localhost:12306， 将会在页面上显示 Hello,Moco&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;配置 json 文件  &lt;/p&gt;
&lt;p&gt;做了一个 demo，demo 的目录结构：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;.
│  global.json
│  moco-runner-0.10.2-standalone.jar
│  test.json
│
└─api
    ├─book
    │      book.json
    │
    └─person
            person.json
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;global.json 作为全局配置文件，里面定义了将会用到的 json 配置文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;   &lt;span class="nt"&gt;&amp;quot;file_root&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;api/book&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;include&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;book.json&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;file_root&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;api/person&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;include&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;person.json&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;book.json 中配置了书籍数据信息：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;request&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;method&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;get&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;uri&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/book_list&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;response&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;books&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                    &lt;span class="s2"&gt;&amp;quot;Python基础编程&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s2"&gt;&amp;quot;wxPython实战&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s2"&gt;&amp;quot;Java核心编程&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s2"&gt;&amp;quot;Java编程思想&amp;quot;&lt;/span&gt;
                &lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;request&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;method&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;get&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;uri&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/book&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;queries&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;book_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;java_hxbc&amp;quot;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;response&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Java核心编程&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;price&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;person.json 配置了人物信息：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;request&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;method&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;get&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;uri&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/person&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;queries&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Jack&amp;quot;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;response&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;country&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;USA&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;age&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;使用 Postman 测试接口&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;开启服务，当使用全局配置时，需要使用-g选项，而非之前的-c&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt; &lt;span class="n"&gt;moco&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;runner&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.10.2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;standalone&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;jar&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="mi"&gt;12306&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;global&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;json&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;测试获取书籍列表：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="01" src="/postsimage/mocktest/01.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;获取 Java 核心编程的信息：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="02" src="/postsimage/mocktest/02.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;获取 Jack 的信息：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="03" src="/postsimage/mocktest/03.png"&gt;&lt;/p&gt;
&lt;h4&gt;其它配置方法&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;通过配置不同的 json 文件，使得接口请求方式、返回的数据满足接口文档，这样就可以在完成接口用例的同时进行调试用例、用例完成后可以立即对接口进行测试。另外前端开发人员也可以使用这些模拟数据进行调试，这样就让测试人员、前端开发人员不用依赖于接口开发人员对接口的开发。&lt;/li&gt;
&lt;li&gt;Moco 除了支持 get，还支持 post、put 、delete 等请求方式&lt;/li&gt;
&lt;li&gt;前面 demo 中配置的返回数据类型都是 json，Moco 当然也支持 text、file 等类型&lt;/li&gt;
&lt;li&gt;可以在 request 中设置 Headers , Cookies , StatusCode&lt;/li&gt;
&lt;li&gt;Moco 的其它特性可参考 Moco 的 API 文档&lt;/li&gt;
&lt;/ul&gt;</content><category term="[接口测试]"></category></entry><entry><title>测试Jenkins构建及禁用Job接口</title><link href="https://xmenfolk.github.io/posts/JenkinsBuildJobApiTest/" rel="alternate"></link><published>2016-04-13T00:00:00-03:00</published><updated>2016-04-13T00:00:00-03:00</updated><author><name>Angie</name></author><id>tag:xmenfolk.github.io,2016-04-13:/posts/JenkinsBuildJobApiTest/</id><summary type="html">&lt;p&gt;使用python unittest+requests对Jenkins构建及禁用job接口进行测试:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# coding=utf-8&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;requests.auth&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HTTPBasicAuth&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JenkinsPostTest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# 构建job的url&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;build_job_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://192.168.217.130:8080/jenkins/job/check_python_version/build&amp;#39;&lt;/span&gt;
        &lt;span class="c1"&gt;# 禁用job的url&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;disable_job_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://192.168.217.130:8080/jenkins/job/check_python_version/disable&amp;#39;&lt;/span&gt;
        &lt;span class="c1"&gt;# 获取job状态等信息的rul&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;job_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://192.168.217.130:8080/jenkins/job/check_python_version/api/json&amp;#39;&lt;/span&gt;

    &lt;span class="c1"&gt;# 测试构建某一job接口&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_buildJob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;build_job_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;201&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# 测试禁用某一job接口&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_disableJob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# 确认job状态是否可执行，&amp;#39;buildable&amp;#39;:&amp;#39;true&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_JobInfo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# 禁用job，断言禁用job是否成功&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;disable_job_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# 获取当前job状态&lt;/span&gt;
        &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_JobInfo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertFalse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;

    &lt;span class="c1"&gt;# 获取当前job信息&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_JobInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;job_info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;job_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;job_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;buildable&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;使用python unittest+requests对Jenkins构建及禁用job接口进行测试:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# coding=utf-8&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;requests.auth&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HTTPBasicAuth&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JenkinsPostTest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# 构建job的url&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;build_job_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://192.168.217.130:8080/jenkins/job/check_python_version/build&amp;#39;&lt;/span&gt;
        &lt;span class="c1"&gt;# 禁用job的url&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;disable_job_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://192.168.217.130:8080/jenkins/job/check_python_version/disable&amp;#39;&lt;/span&gt;
        &lt;span class="c1"&gt;# 获取job状态等信息的rul&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;job_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://192.168.217.130:8080/jenkins/job/check_python_version/api/json&amp;#39;&lt;/span&gt;

    &lt;span class="c1"&gt;# 测试构建某一job接口&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_buildJob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;build_job_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;201&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# 测试禁用某一job接口&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_disableJob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# 确认job状态是否可执行，&amp;#39;buildable&amp;#39;:&amp;#39;true&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_JobInfo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# 禁用job，断言禁用job是否成功&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;disable_job_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# 获取当前job状态&lt;/span&gt;
        &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_JobInfo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertFalse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;

    &lt;span class="c1"&gt;# 获取当前job信息&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_JobInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;job_info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;job_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;job_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;buildable&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="[Python"></category><category term="接口测试]"></category></entry><entry><title>一个简单Python单元测试用例</title><link href="https://xmenfolk.github.io/posts/simplePythonUnittest/" rel="alternate"></link><published>2016-04-13T00:00:00-03:00</published><updated>2016-04-13T00:00:00-03:00</updated><author><name>Angie</name></author><id>tag:xmenfolk.github.io,2016-04-13:/posts/simplePythonUnittest/</id><summary type="html">&lt;p&gt;使用python unittest 框架进行单元测试&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# coding=utf-8&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;

&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;测试除法&lt;/span&gt;
&lt;span class="sd"&gt;1、自定义1个除法函数div&lt;/span&gt;
&lt;span class="sd"&gt;2、测试 1/1&lt;/span&gt;
&lt;span class="sd"&gt;3、测试 3/4&lt;/span&gt;
&lt;span class="sd"&gt;4、测试 3/0&lt;/span&gt;
&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
    &lt;span class="c1"&gt;# 1 / 2 = 1&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyfirstTestCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;run before every testcase&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tearDown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;run after every testcase&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_1div1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;case1:1/1&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;case1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;case1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_3div4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;case1:3/4&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;case2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;case2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_3div0&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;case3:3/0&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;case3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertRaises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;ZeroDivisionError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;使用python unittest 框架进行单元测试&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# coding=utf-8&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;

&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;测试除法&lt;/span&gt;
&lt;span class="sd"&gt;1、自定义1个除法函数div&lt;/span&gt;
&lt;span class="sd"&gt;2、测试 1/1&lt;/span&gt;
&lt;span class="sd"&gt;3、测试 3/4&lt;/span&gt;
&lt;span class="sd"&gt;4、测试 3/0&lt;/span&gt;
&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
    &lt;span class="c1"&gt;# 1 / 2 = 1&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyfirstTestCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;run before every testcase&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tearDown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;run after every testcase&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_1div1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;case1:1/1&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;case1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;case1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_3div4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;case1:3/4&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;case2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;case2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_3div0&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;case3:3/0&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;case3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertRaises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;ZeroDivisionError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="[python]"></category></entry></feed>